[{"filePath":"/home/runner/workspace/client/src/components/credit-report/account-row.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useQuery' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CheckCircle' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'FileText' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Plus' is defined but never used.","line":8,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Eye' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'EyeOff' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Info' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'X' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Badge' is defined but never used.","line":27,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1131,1134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1131,1134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'onDispute' is defined but never used. Allowed unused args must match /^_/u.","line":77,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'showDropdowns' is assigned a value but never used. Allowed unused args must match /^_/u.","line":81,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isShowingGreenFeedback' is assigned a value but never used.","line":120,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setIsShowingGreenFeedback' is assigned a value but never used.","line":120,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":59},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'customInstruction', 'customReason', 'isCollapsed', 'selectedInstruction', 'selectedReason', 'showCustomInstructionField', and 'showCustomReasonField'. Either include them or remove the dependency array.","line":221,"column":6,"nodeType":"ArrayExpression","endLine":221,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [savedDisputes, account, isCollapsed, selectedReason, selectedInstruction, showCustomReasonField, showCustomInstructionField, customReason, customInstruction]","fix":{"range":[8011,8035],"text":"[savedDisputes, account, isCollapsed, selectedReason, selectedInstruction, showCustomReasonField, showCustomInstructionField, customReason, customInstruction]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setTypedReason' is assigned a value but never used.","line":238,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":238,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setTypedInstruction' is assigned a value but never used.","line":239,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":239,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasAiGeneratedText' is assigned a value but never used.","line":240,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":240,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getAccountType' is assigned a value but never used.","line":248,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":248,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":356,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":356,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasSelectedViolations' is assigned a value but never used.","line":440,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":440,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":646,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":646,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25053,25056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25053,25056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":652,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":652,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25283,25286],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25283,25286],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":773,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":773,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatAccountDetails' is assigned a value but never used.","line":843,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":843,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":844,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":844,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[32721,32724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[32721,32724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getAccountDataStyle' is assigned a value but never used.","line":977,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":977,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport {\n  AlertTriangle,\n  CheckCircle,\n  Zap,\n  FileText,\n  Plus,\n  Eye,\n  EyeOff,\n  ChevronDown,\n  ChevronUp,\n  Info,\n  Save,\n  X,\n  Lightbulb,\n} from 'lucide-react';\n\nimport { Card, CardContent } from '@/components/ui/card';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogDescription,\n} from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { PaymentHistoryVisual } from './payment-history-visual';\n\ninterface Account {\n  '@_SubscriberCode': string;\n  '@_AccountStatusType': string;\n  '@_AccountType': string;\n  '@_CurrentBalance': string;\n  '@_HighCreditAmount': string;\n  _CREDITOR?: {\n    '@_Name': string;\n  };\n}\n\ninterface AccountRowProps {\n  account: Account;\n  aiViolations?: string[];\n  onDispute?: (account: any) => void;\n  disputeReasons?: string[];\n  disputeInstructions?: string[];\n  isFirstCopy?: boolean;\n  showDropdowns?: boolean;\n  onDisputeSaved?: (\n    accountId: string,\n    disputeData?: { reason: string; instruction: string; violations?: string[] }\n  ) => void;\n  onDisputeReset?: (accountId: string) => void;\n  onHeaderReset?: () => void;\n  expandAll?: boolean;\n  aiScanCompleted?: boolean;\n  savedDisputes?: {\n    [accountId: string]: boolean | { reason: string; instruction: string; violations?: string[] };\n  };\n  isFirstInConnectedSection?: boolean;\n  allNegativeAccountsSaved?: boolean;\n}\n\nexport function AccountRow({\n  account,\n  aiViolations = [],\n  onDispute,\n  disputeReasons: passedReasons = [],\n  disputeInstructions: passedInstructions = [],\n  isFirstCopy = false,\n  showDropdowns = false,\n  onHeaderReset,\n  onDisputeSaved,\n  onDisputeReset,\n  expandAll = false,\n  aiScanCompleted = false,\n  savedDisputes = {},\n  isFirstInConnectedSection = false,\n  allNegativeAccountsSaved = false,\n}: AccountRowProps): JSX.Element {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Create a unique identifier for this account instance\n  const accountUniqueId = `${account['@_SubscriberCode']}-${account['@_AccountIdentifier'] || account['@_AccountNumber'] || account['@_CurrentBalance'] || 'unknown'}`;\n\n  // Mutation to save custom templates\n  const saveTemplateMutation = useMutation({\n    mutationFn: (data: { type: string; text: string; category: string }) =>\n      fetch('/api/templates', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      }).then((res) => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/templates'] });\n      toast({\n        title: 'Template saved',\n        description: 'Your custom text has been saved for future use.',\n      });\n    },\n  });\n  // Dispute form state\n  const [selectedReason, setSelectedReason] = useState<string>('');\n  const [selectedInstruction, setSelectedInstruction] = useState<string>('');\n  const [customReason, setCustomReason] = useState<string>('');\n  const [customInstruction, setCustomInstruction] = useState<string>('');\n  const [selectedViolations, setSelectedViolations] = useState<string[]>([]);\n  const [isDisputeSaved, setIsDisputeSaved] = useState(false);\n  const [isShowingGreenFeedback, setIsShowingGreenFeedback] = useState(false);\n\n  // Check if this account is in savedDisputes and update internal state\n  useEffect(() => {\n    const accountId =\n      account['@CreditLiabilityID'] ||\n      account['@_AccountNumber'] ||\n      account['@_AccountIdentifier'] ||\n      account['@_SubscriberCode'] ||\n      'unknown';\n    if (savedDisputes[accountId]) {\n      setIsDisputeSaved(true);\n      // For public records: Check if this is an existing save (card was already collapsed)\n      // Only collapse immediately if this card was previously saved and collapsed\n      if (isCollapsed) {\n        // This card was already collapsed from a previous save - keep it collapsed\n        return;\n      }\n      // Don't immediately collapse new saves - let the individual save timing handle collapse\n\n      // Only restore saved dispute data if user hasn't made manual selections\n      const hasUserSelections =\n        selectedReason ||\n        selectedInstruction ||\n        showCustomReasonField ||\n        showCustomInstructionField;\n\n      if (!hasUserSelections) {\n        const savedData = savedDisputes[accountId];\n        if (savedData && typeof savedData === 'object') {\n          // Type guard to ensure we have the right structure\n          const typedSavedData = savedData as { reason?: string; instruction?: string };\n          if (typedSavedData.reason && typedSavedData.instruction) {\n            // Check if current form is empty or has default/truncated text\n            const currentReason = selectedReason || customReason || '';\n            const currentInstruction = selectedInstruction || customInstruction || '';\n            const isReasonEmpty = !currentReason.trim();\n            const isInstructionEmpty = !currentInstruction.trim();\n            const isReasonTruncated = currentReason.length > 0 && currentReason.length < 30;\n            const isInstructionTruncated =\n              currentInstruction.length > 0 && currentInstruction.length < 30;\n\n            if (\n              isReasonEmpty ||\n              isReasonTruncated ||\n              isInstructionEmpty ||\n              isInstructionTruncated\n            ) {\n              // Restore the saved data\n\n              // Check if saved data contains predefined dropdown values\n              const disputeReasons = [\n                \"This account doesn't belong to me\",\n                'I already paid this account in full',\n                'The payment history is wrong',\n                'The balance amount is incorrect',\n                'This account is too old to be reported',\n                'I was a victim of identity theft',\n                'My mother has the same name as me',\n                'My father has the same name as me',\n                'My son has the same name as me',\n              ];\n\n              const disputeInstructions = [\n                'Please remove this account from my credit report',\n                'Please update this account to show a zero balance',\n                'Please correct the payment history for this account',\n                'Please verify and correct the balance amount',\n                'Please remove this outdated account per FCRA guidelines',\n                'Please remove this fraudulent account immediately',\n                \"Please verify the account holder's identity\",\n                \"Please verify the account holder's identity\",\n                \"Please verify the account holder's identity\",\n              ];\n\n              if (disputeReasons.includes(typedSavedData.reason)) {\n                // Saved data uses dropdown selection\n                setSelectedReason(typedSavedData.reason);\n                setShowCustomReasonField(false);\n              } else {\n                // Saved data uses custom text\n                setCustomReason(typedSavedData.reason);\n                setShowCustomReasonField(true);\n                setSelectedReason('');\n              }\n\n              if (disputeInstructions.includes(typedSavedData.instruction)) {\n                // Saved data uses dropdown selection\n                setSelectedInstruction(typedSavedData.instruction);\n                setShowCustomInstructionField(false);\n              } else {\n                // Saved data uses custom text\n                setCustomInstruction(typedSavedData.instruction);\n                setShowCustomInstructionField(true);\n                setSelectedInstruction('');\n              }\n            }\n          }\n        }\n      }\n    }\n  }, [savedDisputes, account]);\n\n  // UI visibility state\n  const [showViolations, setShowViolations] = useState(false);\n  const [showAccountDetails, setShowAccountDetails] = useState(false);\n  const [showMobileModal, setShowMobileModal] = useState(false);\n  const [showCustomReasonField, setShowCustomReasonField] = useState(false);\n  const [showCustomInstructionField, setShowCustomInstructionField] = useState(false);\n  const [showGuideArrow, setShowGuideArrow] = useState(false);\n  const [showPositiveDetails, setShowPositiveDetails] = useState(false);\n  const [showGuidedHelp, setShowGuidedHelp] = useState(false);\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [selectedSuggestionIndex, setSelectedSuggestionIndex] = useState<number | null>(null);\n\n  // AI typing animation state\n  const [isTypingReason, setIsTypingReason] = useState(false);\n  const [isTypingInstruction, setIsTypingInstruction] = useState(false);\n  const [typedReason, setTypedReason] = useState('');\n  const [typedInstruction, setTypedInstruction] = useState('');\n  const [hasAiGeneratedText, setHasAiGeneratedText] = useState<boolean>(false);\n\n  // Status dropdown states for each bureau\n  const [transUnionStatus, setTransUnionStatus] = useState<string>('');\n  const [equifaxStatus, setEquifaxStatus] = useState<string>('');\n  const [experianStatus, setExperianStatus] = useState<string>('');\n\n  // Utility functions\n  const getAccountType = () => account['@_AccountType'] || 'Credit Card';\n  const isPublicRecord = () =>\n    account['@_AccountType'] === 'Public Record' || account.publicRecordType;\n\n  // Dispute template configurations\n  const getDisputeTemplates = (creditorName: string) => ({\n    chargedOff: [\n      {\n        title: 'Paid/Settled Debt Violation',\n        reason: 'This account was paid in full or settled',\n        instruction: `My credit report shows an outstanding balance owed to ${creditorName}. This account was paid in full/settled, and no further amount is due. Please update to reflect zero balance.`,\n      },\n      {\n        title: 'Inaccurate Balance Reporting',\n        reason: 'The balance amount reported is incorrect',\n        instruction: `The balance shown for ${creditorName} is inaccurate. Please verify the correct balance with the original creditor and update accordingly.`,\n      },\n      {\n        title: 'Outdated Account (7-Year Rule)',\n        reason: 'This account exceeds the 7-year reporting period',\n        instruction: `This negative account is older than 7 years from the date of first delinquency. Per FCRA Section 605, please remove this outdated account immediately.`,\n      },\n    ],\n    collection: [\n      {\n        title: 'Debt Validation Request',\n        reason: 'Requesting validation of this debt',\n        instruction: `Please provide validation that this debt belongs to me, including the original signed agreement and complete payment history. Per FDCPA Section 809, collection must cease until validation is provided.`,\n      },\n      {\n        title: 'Unauthorized Collection',\n        reason: 'Collection agency not authorized to collect',\n        instruction: `Please provide proof that ${creditorName} is authorized to collect this debt, including the assignment agreement from the original creditor.`,\n      },\n      {\n        title: 'Duplicate Collection Reporting',\n        reason: 'Both original creditor and collection agency reporting',\n        instruction: `My credit report shows both the original creditor and collection agency reporting the same debt. This duplicate reporting inflates my debt ratio. Please remove the duplicate entry.`,\n      },\n    ],\n    latePayment: [\n      {\n        title: 'Incorrect Late Payment Marks',\n        reason: 'These payments were made on time',\n        instruction: `My credit report shows late payments to ${creditorName}. Those payments were made on time. Please update the payment history to reflect accurate payment dates and remove late markings.`,\n      },\n      {\n        title: 'Payment History Verification',\n        reason: 'Request verification of payment dates',\n        instruction: `Please verify the payment history with ${creditorName} and provide documentation showing the actual payment dates. The current reporting appears inaccurate.`,\n      },\n      {\n        title: 'Date of Last Activity Error',\n        reason: 'The date of last activity is incorrect',\n        instruction: `The date of last activity reported for ${creditorName} is inaccurate. Please verify and correct this date as it affects the reporting period calculation.`,\n      },\n    ],\n    general: [\n      {\n        title: 'Account Does Not Belong to Me',\n        reason: 'This account does not belong to me',\n        instruction: `My credit report shows an account with ${creditorName} that does not belong to me. I have never had an account with this creditor. Please remove this unauthorized account.`,\n      },\n      {\n        title: 'Mixed File Information',\n        reason: 'Credit file has been mixed with another person',\n        instruction: `My credit report shows accounts and information that do not belong to me. I believe my credit file has been mixed with someone else's file. Please investigate and remove all incorrect information.`,\n      },\n      {\n        title: 'Incomplete Account Information',\n        reason: 'Account information is incomplete or inaccurate',\n        instruction: `The account information for ${creditorName} is incomplete or contains inaccuracies. Please verify all details with the creditor and update or remove if information cannot be verified.`,\n      },\n    ],\n  });\n\n  // Get 3 FCRA/FDCPA-based dispute combinations\n  const getBestPracticeCombinations = () => {\n    const accountStatus = account['@_AccountStatusType'] || '';\n    const paymentStatus = account['@_PaymentHistoryProfile'] || '';\n    const currentBalance = parseFloat(account['@_CurrentBalance'] || '0');\n    const creditorName = account['@_AccountName'] || 'this creditor';\n    const accountType = account['@_AccountType'] || '';\n\n    const templates = getDisputeTemplates(creditorName);\n\n    // Determine account category and return appropriate templates\n    if (\n      accountStatus.toLowerCase().includes('charged') ||\n      (accountStatus.toLowerCase().includes('closed') && currentBalance > 0)\n    ) {\n      return templates.chargedOff;\n    } else if (\n      accountStatus.toLowerCase().includes('collection') ||\n      accountType.toLowerCase().includes('collection')\n    ) {\n      return templates.collection;\n    } else if (paymentStatus && paymentStatus.includes('X')) {\n      return templates.latePayment;\n    } else {\n      return templates.general;\n    }\n  };\n\n  // Apply complete reason/instruction combination with autotype effect\n  const applyBestPracticeCombination = (\n    combination: { reason: string; instruction: string },\n    index: number,\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    // Set selected suggestion index to track which one is chosen\n    setSelectedSuggestionIndex(index);\n\n    // Close the dispute suggestions box immediately\n    setShowGuidedHelp(false);\n\n    // Add slow scroll to grey divider\n    setTimeout(() => {\n      const greyDividerId = `grey-divider-${accountUniqueId}`;\n      const greyDivider = document.getElementById(greyDividerId);\n\n      if (greyDivider) {\n        const rect = greyDivider.getBoundingClientRect();\n        const scrollTop = window.pageYOffset + rect.top - 100;\n\n        window.scrollTo({\n          top: scrollTop,\n          behavior: 'smooth',\n        });\n      }\n    }, 100);\n\n    // Clear current values and prepare for typing\n    setSelectedReason('');\n    setSelectedInstruction('');\n    setCustomReason('');\n    setCustomInstruction('');\n    setShowCustomReasonField(true);\n    setShowCustomInstructionField(true);\n\n    // Start typing the reason\n    setIsTypingReason(true);\n    let reasonIndex = 0;\n\n    const typeReason = () => {\n      if (reasonIndex < combination.reason.length) {\n        setCustomReason(combination.reason.substring(0, reasonIndex + 1));\n        reasonIndex++;\n        setTimeout(typeReason, 25); // 25ms delay between characters\n      } else {\n        // Reason typing complete\n        setIsTypingReason(false);\n\n        // Start typing instruction after brief pause\n        setTimeout(() => {\n          setIsTypingInstruction(true);\n          let instructionIndex = 0;\n\n          const typeInstruction = () => {\n            if (instructionIndex < combination.instruction.length) {\n              setCustomInstruction(combination.instruction.substring(0, instructionIndex + 1));\n              instructionIndex++;\n              setTimeout(typeInstruction, 15); // Faster for instruction\n            } else {\n              // Instruction typing complete\n              setIsTypingInstruction(false);\n              // Check if form is complete after typing is done\n              setTimeout(() => {\n                checkFormCompletionAndShowArrow(combination.reason, combination.instruction);\n              }, 200);\n            }\n          };\n          typeInstruction();\n        }, 400); // Brief pause between reason and instruction\n      }\n    };\n\n    typeReason();\n  };\n\n  // Check if form is complete and show guide arrow\n  const checkFormCompletionAndShowArrow = (\n    overrideReason?: string,\n    overrideInstruction?: string\n  ) => {\n    // Check both custom fields, typed fields (from Metro 2), and default selections\n    const hasReason = customReason.trim() || typedReason.trim() || overrideReason || selectedReason;\n    const hasInstruction =\n      customInstruction.trim() ||\n      typedInstruction.trim() ||\n      overrideInstruction ||\n      selectedInstruction;\n    const hasSelectedViolations = selectedViolations.length > 0;\n\n    // Show arrow if form is complete (either with violations OR with dropdown selections)\n    if (hasReason && hasInstruction && !isDisputeSaved) {\n      setShowGuideArrow(true);\n      setTimeout(() => {\n        setShowGuideArrow(false);\n      }, 4000);\n    }\n  };\n\n  // Determine if account is truly negative based on actual JSON data fields\n  const isNegative = () => {\n    // Primary indicators of negative accounts based on actual JSON structure\n\n    // 1. Explicit derogatory data indicator\n    if (account['@_DerogatoryDataIndicator'] === 'Y') return true;\n\n    // 2. Collection accounts\n    if (account['@IsCollectionIndicator'] === 'Y') return true;\n\n    // 3. Charge-off accounts\n    if (account['@IsChargeoffIndicator'] === 'Y') return true;\n\n    // 4. Check for past due amounts (indicates late payments)\n    const pastDue = parseInt(account['@_PastDueAmount'] || '0');\n    if (pastDue > 0) return true;\n\n    // 5. Check current rating code for late payments (2-9 indicate late payments)\n    const currentRating = account._CURRENT_RATING?.['@_Code'];\n    if (currentRating && ['2', '3', '4', '5', '6', '7', '8', '9'].includes(currentRating))\n      return true;\n\n    // 6. Check for charge-off date\n    if (account['@_ChargeOffDate']) return true;\n\n    return false;\n  };\n\n  const accountIsNegative = isNegative();\n  const hasAnyNegative = accountIsNegative;\n\n  // Reset individual account states when expandAll becomes false (Collapse All)\n  useEffect(() => {\n    if (expandAll === false && !hasAnyNegative) {\n      setShowPositiveDetails(false);\n      setShowAccountDetails(false);\n    }\n  }, [expandAll, hasAnyNegative]);\n\n  // Determine if account is closed\n  const isClosed = () => {\n    // Check for closed account status\n    const accountStatus = account['@_AccountStatusType'];\n    if (\n      accountStatus &&\n      (accountStatus.toLowerCase().includes('closed') ||\n        accountStatus.toLowerCase().includes('paid') ||\n        accountStatus === 'C')\n    )\n      return true;\n\n    // Check for closed date\n    if (account['@_AccountClosedDate']) return true;\n\n    // Check current rating for closed accounts\n    const currentRating = account._CURRENT_RATING?.['@_Code'];\n    if (currentRating && currentRating === 'C') return true;\n\n    return false;\n  };\n\n  const accountIsClosed = isClosed();\n\n  // Use passed arrays or fallback to consumer-friendly defaults based on common FCRA violations\n  const disputeReasons =\n    passedReasons.length > 0\n      ? [...passedReasons, 'Add new custom reason']\n      : [\n          \"This account doesn't belong to me\",\n          'I already paid this account in full',\n          'The payment history is wrong',\n          'The balance amount is incorrect',\n          'This account is too old to be reported',\n          'I was a victim of identity theft',\n          'My mother has the same name as me',\n          'My father has the same name as me',\n          'My son has the same name as me',\n          'Add new custom reason',\n        ];\n\n  const disputeInstructions =\n    passedInstructions.length > 0\n      ? [...passedInstructions, 'Add new custom instruction']\n      : [\n          'Remove this account completely from my credit report immediately',\n          'Delete all inaccurate payment history from my credit report',\n          'Remove the incorrect balance information from my credit report',\n          \"Delete this account from my credit report since it's too old to report\",\n          'Remove this fraudulent account from my credit report due to identity theft',\n          'Delete this account that belongs to my family member from my credit report',\n          'Remove this account that was discharged in bankruptcy from my credit report',\n          'Delete this duplicate account from my credit report',\n          'Remove all inaccurate information about this account from my credit report',\n          'Add new custom instruction',\n        ];\n\n  const statusOptions = [\n    'Positive',\n    'Negative',\n    'Repaired',\n    'Deleted',\n    'In Dispute',\n    'Verified',\n    'Updated',\n    'Unspecified',\n    'Ignore',\n  ];\n\n  // Helper functions to safely extract account data from nested structure\n  const getAccountField = (field: string, fallback: string = 'N/A') => {\n    let value = null;\n\n    // Direct field access - try exact field name first\n    if (account[field] !== undefined && account[field] !== null && account[field] !== '') {\n      value = account[field];\n    }\n\n    // Handle specific field mappings based on actual JSON structure\n    switch (field) {\n      case '@_CreditLimitAmount':\n        value = account['@_CreditLimitAmount'] || account['@_HighCreditAmount'] || null;\n        break;\n      case '@_ActualPaymentAmount':\n        value = account['@_ActualPaymentAmount'] || account['@_MonthlyPaymentAmount'] || null;\n        break;\n      case '@_CreditBusinessType':\n        value = account['@CreditBusinessType'] || null;\n        break;\n      case '@_TermsFrequencyType':\n        // This field might not exist in many records\n        value = account['@_TermsFrequencyType'] || null;\n        break;\n      case '@_CreditLiabilityAccountReportedDate':\n        value =\n          account['@_CreditLiabilityAccountReportedDate'] ||\n          account['@_AccountReportedDate'] ||\n          null;\n        break;\n      case '@_Late30DaysCount':\n        value = account['_LATE_COUNT']?.['@_30Days'] || '0';\n        break;\n      case '@_Late60DaysCount':\n        value = account['_LATE_COUNT']?.['@_60Days'] || '0';\n        break;\n      case '@_Late90DaysCount':\n        value = account['_LATE_COUNT']?.['@_90Days'] || '0';\n        break;\n      case '@_PaymentPatternData':\n        value = account['_PAYMENT_PATTERN']?.['@_Data'] || null;\n        break;\n      case '@_PaymentPatternStartDate':\n        value = account['_PAYMENT_PATTERN']?.['@_StartDate'] || null;\n        break;\n      case '@_CurrentRatingCode':\n        value = account['_CURRENT_RATING']?.['@_Code'] || null;\n        break;\n      case '@_CurrentRatingType':\n        value = account['_CURRENT_RATING']?.['@_Type'] || null;\n        break;\n      case '@_CreditorName':\n        value = account['_CREDITOR']?.['@_Name'] || null;\n        break;\n      case '@_SubscriberName':\n        value =\n          account['@_SubscriberName'] ||\n          account['_CREDITOR']?.['@_Name'] ||\n          account['@_CreditorName'] ||\n          null;\n        break;\n      case '@_SubscriberCode':\n        value = account['CREDIT_REPOSITORY']?.['@_SubscriberCode'] || null;\n        break;\n      case '@_PastDueAmount':\n        value = account['@_PastDueAmount'] || '0';\n        break;\n      case '@_OriginalCreditorName':\n        value = account['@_OriginalCreditorName'] || null;\n        break;\n      case '@_CollectionDate':\n        value = account['@CollectionDate'] || null;\n        break;\n      default:\n        // Try nested structures if direct access didn't work\n        if (value === null) {\n          value =\n            account.CREDIT_LIABILITY_DETAIL?.[field] || account.CREDIT_COMMENT?.[field] || null;\n        }\n        break;\n    }\n\n    // Return the value if found, otherwise return fallback\n    return value !== null && value !== undefined && value !== '' ? value : fallback;\n  };\n\n  // Formatting utilities\n  const formatCurrency = (amount: any) => {\n    if (!amount || amount === 'N/A') return 'N/A';\n    const num = parseFloat(amount.toString().replace(/[^0-9.-]/g, ''));\n    return isNaN(num) ? 'N/A' : `$${num.toLocaleString()}`;\n  };\n\n  const formatDate = (dateStr: any) => {\n    if (!dateStr || dateStr === 'N/A') return 'N/A';\n    try {\n      const date = new Date(dateStr);\n      return isNaN(date.getTime()) ? dateStr : date.toLocaleDateString();\n    } catch {\n      return dateStr;\n    }\n  };\n\n  const addViolationToDispute = async (violation: string) => {\n    if (!selectedViolations.includes(violation)) {\n      const newViolations = [...selectedViolations, violation];\n      setSelectedViolations(newViolations);\n\n      // Auto-populate text fields when violations are added\n      const isFirstViolation = selectedViolations.length === 0;\n\n      // Create structured compliance reason with all violations\n      const complianceReason = `This tradeline contains ${newViolations.length > 1 ? 'multiple ' : ''}compliance violations under Metro 2 and the FCRA:\n${newViolations\n  .map((v) => {\n    if (v.includes('Metro 2')) {\n      return `• Metro 2 Violation: ${v.replace('Metro 2 Violation: ', '')}`;\n    } else if (v.includes('FCRA')) {\n      return `• FCRA Violation: ${v.replace('FCRA Violation: ', '')} under FCRA § 623`;\n    }\n    return `• ${v}`;\n  })\n  .join('\\n')}\n\nDue to these reporting inaccuracies and regulatory violations, I am requesting the permanent deletion of this tradeline from my credit report.`;\n\n      const complianceInstruction =\n        'Please take immediate action to remove this non-compliant account in accordance with Metro 2 and FCRA requirements. If reinvestigation cannot verify accuracy within 30 days, permanent deletion is required under 15 USC §1681i(a)(1).';\n\n      if (isFirstViolation) {\n        // First violation - use typing animation\n        setHasAiGeneratedText(true);\n        // Switch to custom text mode\n        setShowCustomReasonField(true);\n        setShowCustomInstructionField(true);\n        setSelectedReason('');\n        setSelectedInstruction('');\n        setTimeout(async () => {\n          await typeText(complianceReason, setCustomReason, setIsTypingReason, 3);\n          await new Promise((resolve) => setTimeout(resolve, 75));\n          await typeText(complianceInstruction, setCustomInstruction, setIsTypingInstruction, 4);\n          // Check for arrow after both fields are typed\n          setTimeout(() => {\n            checkFormCompletionAndShowArrow(complianceReason, complianceInstruction);\n          }, 500);\n        }, 150);\n      } else {\n        // Additional violations - update text instantly\n        setHasAiGeneratedText(true);\n        setCustomReason(complianceReason);\n        setCustomInstruction(complianceInstruction);\n        // Check for arrow after instant update\n        setTimeout(\n          () => checkFormCompletionAndShowArrow(complianceReason, complianceInstruction),\n          100\n        );\n      }\n    }\n  };\n\n  const removeViolationFromDispute = (violation: string) => {\n    const newViolations = selectedViolations.filter((v) => v !== violation);\n    setSelectedViolations(newViolations);\n\n    // Update text fields to reflect remaining violations\n    if (newViolations.length === 0) {\n      // No violations left - clear the fields\n      setCustomReason('');\n      setCustomInstruction('');\n    } else {\n      // Update text with remaining violations\n      const complianceReason = `This tradeline contains ${newViolations.length > 1 ? 'multiple ' : ''}compliance violations under Metro 2 and the FCRA:\n${newViolations\n  .map((v) => {\n    if (v.includes('Metro 2')) {\n      return `• Metro 2 Violation: ${v.replace('Metro 2 Violation: ', '')}`;\n    } else if (v.includes('FCRA')) {\n      return `• FCRA Violation: ${v.replace('FCRA Violation: ', '')} under FCRA § 623`;\n    }\n    return `• ${v}`;\n  })\n  .join('\\n')}\n\nDue to these reporting inaccuracies and regulatory violations, I am requesting the permanent deletion of this tradeline from my credit report.`;\n\n      const complianceInstruction =\n        'Please take immediate action to remove this non-compliant account in accordance with Metro 2 and FCRA requirements. If reinvestigation cannot verify accuracy within 30 days, permanent deletion is required under 15 USC §1681i(a)(1).';\n\n      setCustomReason(complianceReason);\n      setCustomInstruction(complianceInstruction);\n    }\n\n    // Check for arrow after updating violation text\n    setTimeout(() => checkFormCompletionAndShowArrow(), 100);\n  };\n\n  // Typing animation function\n  const typeText = async (\n    text: string,\n    setter: (value: string) => void,\n    isTypingSetter: (value: boolean) => void,\n    speed: number = 30\n  ) => {\n    isTypingSetter(true);\n    setter('');\n\n    for (let i = 0; i <= text.length; i++) {\n      setter(text.slice(0, i));\n      await new Promise((resolve) => setTimeout(resolve, speed));\n    }\n\n    isTypingSetter(false);\n  };\n\n  const addAllViolations = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    setSelectedViolations([...aiViolations]);\n\n    // Close the violations box immediately\n    setShowViolations(false);\n\n    // Create structured compliance reason with improved format\n    const complianceReason = `This tradeline contains multiple compliance violations under Metro 2 and the FCRA:\n${aiViolations\n  .map((violation) => {\n    if (violation.includes('Metro 2')) {\n      return `• Metro 2 Violation: ${violation.replace('Metro 2 Violation: ', '')}`;\n    } else if (violation.includes('FCRA')) {\n      return `• FCRA Violation: ${violation.replace('FCRA Violation: ', '')} under FCRA § 623`;\n    }\n    return `• ${violation}`;\n  })\n  .join('\\n')}\n\nDue to these reporting inaccuracies and regulatory violations, I am requesting the permanent deletion of this tradeline from my credit report.`;\n\n    const complianceInstruction =\n      'Please take immediate action to remove this non-compliant account in accordance with Metro 2 and FCRA requirements. If reinvestigation cannot verify accuracy within 30 days, permanent deletion is required under 15 USC §1681i(a)(1).';\n\n    // Switch to custom text mode\n    setShowCustomReasonField(true);\n    setShowCustomInstructionField(true);\n    setSelectedReason('');\n    setSelectedInstruction('');\n\n    // Add slow scroll to grey divider\n    setTimeout(() => {\n      const greyDividerId = `grey-divider-${accountUniqueId}`;\n      const greyDivider = document.getElementById(greyDividerId);\n\n      if (greyDivider) {\n        const rect = greyDivider.getBoundingClientRect();\n        const scrollTop = window.pageYOffset + rect.top - 100;\n\n        window.scrollTo({\n          top: scrollTop,\n          behavior: 'smooth',\n        });\n      }\n    }, 100);\n\n    // Wait a moment then start typing animations\n    setTimeout(async () => {\n      // Type reason first\n      await typeText(complianceReason, setCustomReason, setIsTypingReason, 3);\n\n      // Small pause between reason and instruction\n      await new Promise((resolve) => setTimeout(resolve, 75));\n\n      // Then type instruction\n      await typeText(complianceInstruction, setCustomInstruction, setIsTypingInstruction, 4);\n\n      // Check for arrow after both fields are typed\n      setTimeout(() => {\n        checkFormCompletionAndShowArrow(complianceReason, complianceInstruction);\n      }, 500);\n    }, 150);\n  };\n\n  // Get creditor name exactly like the main section\n  const getCreditorName = () => {\n    return account['_CREDITOR']?.['@_Name'] || account['@_SubscriberCode'] || 'Unknown Creditor';\n  };\n\n  // Format account details for display\n  const formatAccountDetails = () => {\n    const details: { [key: string]: any } = {};\n    Object.keys(account).forEach((key) => {\n      if (\n        key.startsWith('@') &&\n        account[key] !== null &&\n        account[key] !== undefined &&\n        account[key] !== ''\n      ) {\n        const cleanKey = key.replace('@_', '').replace('@', '');\n        details[cleanKey] = account[key];\n      }\n    });\n    return details;\n  };\n\n  // Convert status codes to readable descriptions\n  const getStatusDescription = (statusCode: string) => {\n    const statusMap: { [key: string]: string } = {\n      '1': 'Current/Pays as Agreed',\n      '2': '30 Days Late',\n      '3': '60 Days Late',\n      '4': '90 Days Late',\n      '5': '120+ Days Late',\n      '7': 'Making Payments Under Wage Earner Plan',\n      '8': 'Repossession',\n      '9': 'Charged Off/Bad Debt',\n      G: 'Collection Account',\n      L: 'Settled for Less Than Full Balance',\n      R: 'Refinanced',\n      C: 'Closed',\n      O: 'Open',\n      U: 'Unrated',\n    };\n    return statusMap[statusCode] || `Status ${statusCode}`;\n  };\n\n  // Use authentic data from JSON - no synthetic variations\n  const getBureauData = () => {\n    const realBalance = parseInt(\n      account['@_UnpaidBalanceAmount'] || account['@_CurrentBalance'] || '0'\n    );\n    const realStatus = account._CURRENT_RATING?.['@_Code'] || '1';\n    const realDate = account['@_AccountOpenedDate'] || '2020-01-01';\n    const reportingBureau = account.CREDIT_REPOSITORY?.['@_SourceType'] || 'Unknown';\n\n    // Use the same authentic data for all bureaus since we only have one record per account\n    return {\n      transUnion: {\n        balance: realBalance,\n        statusCode: realStatus,\n        status: getStatusDescription(realStatus),\n        openDate: realDate,\n        isNegative: false, // Will be determined by isCurrentlyNegative function\n        lastUpdated: account['@_AccountReportedDate'] || '2024-01-01',\n        reportingBureau: reportingBureau === 'TransUnion' ? reportingBureau : 'Not Reporting',\n      },\n      equifax: {\n        balance: realBalance,\n        statusCode: realStatus,\n        status: getStatusDescription(realStatus),\n        openDate: realDate,\n        isNegative: false, // Will be determined by isCurrentlyNegative function\n        lastUpdated: account['@_AccountReportedDate'] || '2024-01-01',\n        reportingBureau: reportingBureau === 'Equifax' ? reportingBureau : 'Not Reporting',\n      },\n      experian: {\n        balance: realBalance,\n        statusCode: realStatus,\n        status: getStatusDescription(realStatus),\n        openDate: realDate,\n        isNegative: false, // Will be determined by isCurrentlyNegative function\n        lastUpdated: account['@_AccountReportedDate'] || '2024-01-01',\n        reportingBureau: reportingBureau === 'Experian' ? reportingBureau : 'Not Reporting',\n      },\n    };\n  };\n\n  const bureauData = getBureauData();\n\n  // Helper function to get consistent account number from JSON data\n  const getAccountNumber = () => {\n    // Use the actual account number from the JSON data\n    return String(account['@_AccountNumber'] || account['@CreditLiabilityID'] || '0000');\n  };\n\n  const getMaskedAccountNumber = () => {\n    const fullNumber = getAccountNumber();\n    return `****${fullNumber.slice(-4)}`;\n  };\n\n  const getPaymentStatusStyle = (status: string) => {\n    const negativeStatuses = [\n      '30 Days Late',\n      '60 Days Late',\n      '90 Days Late',\n      '120 Days Late',\n      'Charge Off',\n      'Collection',\n      'Late',\n      'Past Due',\n    ];\n    const isNegative = negativeStatuses.some(\n      (negStatus) =>\n        status.includes(negStatus) ||\n        status.toLowerCase().includes('late') ||\n        status.toLowerCase().includes('past due') ||\n        status.toLowerCase().includes('charge') ||\n        status.toLowerCase().includes('collection')\n    );\n    return isNegative ? 'text-red-600 font-medium' : 'text-gray-900';\n  };\n\n  const isNegativeAccount = (status: string) => {\n    const negativeStatuses = [\n      '30 Days Late',\n      '60 Days Late',\n      '90 Days Late',\n      '120 Days Late',\n      'Charge Off',\n      'Collection',\n      'Late',\n      'Past Due',\n    ];\n    return negativeStatuses.some(\n      (negStatus) =>\n        status.includes(negStatus) ||\n        status.toLowerCase().includes('late') ||\n        status.toLowerCase().includes('past due') ||\n        status.toLowerCase().includes('charge') ||\n        status.toLowerCase().includes('collection')\n    );\n  };\n\n  const getAccountDataStyle = (status: string) => {\n    return isNegativeAccount(status) ? 'text-red-600' : 'text-gray-900';\n  };\n\n  // For positive and closed accounts, show collapsed view by default (unless expandAll is true)\n  if (!hasAnyNegative && !showPositiveDetails && !expandAll) {\n    const isClosedAccount = accountIsClosed && !accountIsNegative;\n    const ballColor = isClosedAccount ? 'bg-gray-500' : 'bg-green-500';\n    const textColor = isClosedAccount ? 'text-gray-600' : 'text-green-600';\n    const statusText = isClosedAccount ? 'Closed' : 'In Good Standing';\n\n    return (\n      <Card className=\"border-gray-200 bg-white\">\n        <CardContent className=\"p-4\">\n          <div\n            className=\"flex-between cursor-pointer hover:bg-gray-50 -m-4 p-4 rounded-lg transition-colors\"\n            onClick={() => setShowPositiveDetails(true)}\n          >\n            <div className=\"flex items-center gap-3\">\n              <div className={`w-3 h-3 ${ballColor} rounded-full`}></div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900\">\n                  {account._CREDITOR?.['@_Name'] ||\n                    account.CREDIT_BUSINESS?.['@_Name'] ||\n                    'Unknown Creditor'}\n                </h3>\n                <p className={`text-sm ${textColor} font-medium`}>{statusText}</p>\n              </div>\n            </div>\n            {/* Arrow icon for positive/closed accounts */}\n            <div className=\"flex-center w-8 h-8 text-blue-600 hover:text-blue-800 transition-colors\">\n              <ChevronDown className=\"w-4 h-4\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Show collapsed state when dispute is saved\n  if (isCollapsed && isDisputeSaved) {\n    return (\n      <Card\n        className={`transition-all duration-700 shadow-sm border-2 hover:shadow-md border-green-200 bg-green-50/50 ${\n          isFirstInConnectedSection ? 'rounded-b-lg border-t-0' : 'rounded-lg'\n        }`}\n        style={{\n          boxShadow: '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',\n        }}\n        data-account-id={\n          account['@CreditLiabilityID'] ||\n          account['@_AccountNumber'] ||\n          account['@_AccountIdentifier'] ||\n          account['@_SubscriberCode'] ||\n          'unknown'\n        }\n      >\n        <CardContent className=\"p-4\">\n          <div\n            className=\"flex-between cursor-pointer hover:bg-green-100 -m-4 p-4 rounded-lg transition-colors\"\n            onClick={() => setIsCollapsed(false)}\n          >\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-6 h-6 bg-green-500 rounded-full flex-center\">\n                <svg className=\"w-4 h-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n                    clipRule=\"evenodd\"\n                  />\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900\">\n                  {isPublicRecord()\n                    ? account.publicRecordType || account['@_AccountType'] || 'Public Record'\n                    : account._CREDITOR?.['@_Name'] ||\n                      account.CREDIT_BUSINESS?.['@_Name'] ||\n                      'Unknown Creditor'}\n                </h3>\n                <p className=\"text-sm text-green-600 font-medium\">\n                  {(() => {\n                    const accountId =\n                      account['@CreditLiabilityID'] ||\n                      account['@_AccountNumber'] ||\n                      account['@_AccountIdentifier'] ||\n                      account['@_SubscriberCode'] ||\n                      'unknown';\n                    const savedDisputeData = savedDisputes?.[accountId];\n\n                    if (!savedDisputeData) {\n                      return 'Disputes Saved';\n                    }\n\n                    // Count bureau-level disputes for this account\n                    // Each negative bureau appearance counts as a separate dispute\n                    let disputeCount = 0;\n\n                    // Check TransUnion\n                    const tuStatus = bureauData.transUnion.status;\n                    const tuIsNegative =\n                      isNegativeAccount(tuStatus) || account['@_DerogatoryDataIndicator'] === 'Y';\n                    if (tuIsNegative) disputeCount++;\n\n                    // Check Equifax\n                    const eqStatus = bureauData.equifax.status;\n                    const eqIsNegative =\n                      isNegativeAccount(eqStatus) || account['@_DerogatoryDataIndicator'] === 'Y';\n                    if (eqIsNegative) disputeCount++;\n\n                    // Check Experian\n                    const exStatus = bureauData.experian.status;\n                    const exIsNegative =\n                      isNegativeAccount(exStatus) || account['@_DerogatoryDataIndicator'] === 'Y';\n                    if (exIsNegative) disputeCount++;\n\n                    // Ensure minimum of 1 dispute if account is saved\n                    if (disputeCount === 0) disputeCount = 1;\n\n                    return `${disputeCount} Dispute${disputeCount === 1 ? '' : 's'} Saved`;\n                  })()}\n                </p>\n              </div>\n            </div>\n            <ChevronDown className=\"w-4 h-4 text-blue-600\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card\n      className={`transition-all duration-300 shadow-sm hover:shadow-md ${\n        isFirstInConnectedSection ? 'connected-first-account' : 'rounded-lg'\n      } border ${\n        isDisputeSaved\n          ? 'border-green-300 bg-green-50'\n          : hasAnyNegative\n            ? 'border-gray-200 bg-red-50'\n            : 'border-gray-200 bg-white'\n      }`}\n      style={{\n        boxShadow: '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',\n        ...(isFirstInConnectedSection && {\n          borderTopLeftRadius: '0',\n          borderTopRightRadius: '0',\n          borderBottomLeftRadius: '0.5rem',\n          borderBottomRightRadius: '0.5rem',\n          borderTop: 'none',\n        }),\n      }}\n      data-account-id={\n        account['@CreditLiabilityID'] ||\n        account['@_AccountNumber'] ||\n        account['@_AccountIdentifier'] ||\n        account['@_SubscriberCode'] ||\n        'unknown'\n      }\n      data-highlight-target={hasAnyNegative ? 'true' : 'false'}\n    >\n      <CardContent className={`px-6 ${hasAnyNegative ? 'pt-6 pb-6' : 'pt-1 pb-2'}`}>\n        {/* Up arrow for positive accounts when expanded */}\n        {!hasAnyNegative && (showPositiveDetails || expandAll) && (\n          <div className=\"flex-between mb-4 -mx-2\">\n            <div></div>\n            {!expandAll && (\n              <button\n                onClick={() => setShowPositiveDetails(false)}\n                className=\"flex-center w-8 h-8 text-blue-600 hover:text-blue-800 transition-colors\"\n              >\n                <ChevronUp className=\"w-4 h-4\" />\n              </button>\n            )}\n            {expandAll && <div className=\"w-8 h-8\"></div>}\n          </div>\n        )}\n\n        {/* Numbered guidance for negative accounts only */}\n        {hasAnyNegative && (\n          <div className=\"flex-between mb-4\">\n            <div className=\"flex items-center gap-3\">\n              {isDisputeSaved ? (\n                <span className=\"text-green-600 text-lg font-bold\">✓</span>\n              ) : (\n                <span className=\"circle-badge-blue\">1</span>\n              )}\n              <span className=\"font-bold\">\n                {isDisputeSaved\n                  ? 'Account dispute saved'\n                  : 'Review this negative item, then scroll down to steps 2 and 3'}\n              </span>\n            </div>\n            {/* Up arrow for saved accounts aligned with completed text */}\n            {isDisputeSaved && !isCollapsed && (\n              <button\n                onClick={() => setIsCollapsed(true)}\n                className=\"flex-center w-8 h-8 text-blue-600 hover:text-blue-800 transition-colors -mx-2\"\n              >\n                <ChevronUp className=\"w-4 h-4\" />\n              </button>\n            )}\n          </div>\n        )}\n\n        {/* Account Header */}\n        <div className=\"mb-4\">\n          {/* Mobile: No standalone button here anymore */}\n\n          {/* Desktop: Show all three bureau headers */}\n          <div className=\"hidden md:block relative\">\n            {/* Invisible clickable area above bureau headers - aligned with up arrow */}\n            {!hasAnyNegative && showPositiveDetails && !expandAll && (\n              <div\n                className=\"absolute -top-8 left-0 right-0 h-12 cursor-pointer hover:bg-gray-100 hover:bg-opacity-30 rounded-t-lg transition-colors z-10\"\n                onClick={() => setShowPositiveDetails(false)}\n              />\n            )}\n\n            <div className=\"flex-between mb-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 flex-1\">\n                <div className=\"flex items-center gap-2\">\n                  <h3 className=\"font-bold text-cyan-700\">TransUnion</h3>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <h3 className=\"font-bold text-red-600\">Equifax</h3>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <h3 className=\"font-bold text-blue-800\">Experian</h3>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Show All Info Button */}\n        <div className=\"block md:hidden mb-2\">\n          <div className=\"flex-between\">\n            <h3 className=\"font-bold text-cyan-700 text-left\">TransUnion</h3>\n            <Dialog open={showMobileModal} onOpenChange={setShowMobileModal}>\n              <DialogTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex items-center px-2 py-1 text-xs h-6\"\n                >\n                  Show All Info\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-[95vw] max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle className=\"text-lg font-bold\">Complete Account Details</DialogTitle>\n                  <DialogDescription className=\"text-sm text-gray-600\">\n                    Complete account information across all three bureaus\n                  </DialogDescription>\n                </DialogHeader>\n\n                <div className=\"space-y-6\">\n                  {/* TransUnion Details */}\n                  <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n                    <h4 className=\"font-bold text-cyan-700 mb-1\">TransUnion</h4>\n                    <h3 className=\"font-bold text-gray-900 text-lg mb-3\">\n                      {getAccountField('@_SubscriberName') || getCreditorName()}\n                    </h3>\n                    <div className=\"grid grid-cols-1 gap-2 text-xs\">\n                      {isPublicRecord() ? (\n                        // Public Record Fields\n                        <>\n                          <div className=\"flex justify-between border-b border-cyan-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Record Type:</span>\n                            <span className=\"text-gray-900\">\n                              {account.publicRecordType || 'Public Record'}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-cyan-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Court:</span>\n                            <span className=\"text-gray-900\">\n                              {account.courtName || account['@_SubscriberName']}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-cyan-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Case Number:</span>\n                            <span className=\"text-gray-900\">\n                              {account.caseNumber || account['@_AccountIdentifier']}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-cyan-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Filing Date:</span>\n                            <span className=\"text-gray-900\">\n                              {formatDate(account.filingDate || account['@_AccountOpenedDate'])}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-cyan-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Status:</span>\n                            <span className=\"text-red-600 font-medium\">\n                              {account.status || account['@_AccountStatusType']}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-cyan-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Liabilities:</span>\n                            <span className=\"text-gray-900\">\n                              {account.liabilities ||\n                                formatCurrency(account['@_UnpaidBalanceAmount'])}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-cyan-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Assets:</span>\n                            <span className=\"text-gray-900\">{account.assets || 'N/A'}</span>\n                          </div>\n                          {account.dischargeDate && (\n                            <div className=\"flex justify-between border-b border-cyan-100 pb-1\">\n                              <span className=\"font-medium text-gray-600\">Discharge Date:</span>\n                              <span className=\"text-gray-900\">\n                                {formatDate(account.dischargeDate)}\n                              </span>\n                            </div>\n                          )}\n                          {account.completionDate && (\n                            <div className=\"flex justify-between border-b border-cyan-100 pb-1\">\n                              <span className=\"font-medium text-gray-600\">Completion Date:</span>\n                              <span className=\"text-gray-900\">\n                                {formatDate(account.completionDate)}\n                              </span>\n                            </div>\n                          )}\n                          {account.paymentPlan && (\n                            <div className=\"flex justify-between border-b border-cyan-100 pb-1\">\n                              <span className=\"font-medium text-gray-600\">Payment Plan:</span>\n                              <span className=\"text-gray-900\">{account.paymentPlan}</span>\n                            </div>\n                          )}\n                        </>\n                      ) : (\n                        // Regular Account Fields\n                        <>\n                          <div className=\"flex justify-between border-b border-gray-100 py-2\">\n                            <span className=\"font-medium text-gray-700 text-sm\">Account Type:</span>\n                            <span className=\"text-gray-900 text-sm\">\n                              {account['@_AccountType'] || 'Credit Card'}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-gray-100 py-2\">\n                            <span className=\"font-medium text-gray-700 text-sm\">Account #:</span>\n                            <span className=\"text-gray-900 text-sm\">\n                              {getMaskedAccountNumber()}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-gray-100 py-2\">\n                            <span className=\"font-medium text-gray-700 text-sm\">Date Opened:</span>\n                            <span className=\"text-gray-900 text-sm\">\n                              {formatDate(getAccountField('@_AccountOpenedDate'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-gray-100 py-2\">\n                            <span className=\"font-medium text-gray-700 text-sm\">\n                              Payment Status:\n                            </span>\n                            <span\n                              className={`text-sm ${getPaymentStatusStyle(bureauData.transUnion.status)}`}\n                            >\n                              {bureauData.transUnion.status}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-gray-100 py-2\">\n                            <span className=\"font-medium text-gray-700 text-sm\">Credit Limit:</span>\n                            <span className=\"text-gray-900 text-sm\">\n                              {formatCurrency(getAccountField('@_CreditLimitAmount'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-gray-100 py-2\">\n                            <span className=\"font-medium text-gray-700 text-sm\">Balance:</span>\n                            <span className=\"text-gray-900 text-sm\">\n                              ${bureauData.transUnion.balance}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-gray-100 py-2\">\n                            <span className=\"font-medium text-gray-700 text-sm\">\n                              Monthly Payment:\n                            </span>\n                            <span className=\"text-gray-900 text-sm\">\n                              {formatCurrency(getAccountField('@_MonthlyPaymentAmount'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-gray-100 py-2\">\n                            <span className=\"font-medium text-gray-700 text-sm\">High Balance:</span>\n                            <span className=\"text-gray-900 text-sm\">\n                              {formatCurrency(getAccountField('@_HighBalanceAmount'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-gray-100 py-2\">\n                            <span className=\"font-medium text-gray-700 text-sm\">Past Due:</span>\n                            <span className=\"text-gray-900 text-sm\">\n                              {formatCurrency(getAccountField('@_PastDueAmount', '0'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-gray-100 py-2\">\n                            <span className=\"font-medium text-gray-700 text-sm\">\n                              Last Activity:\n                            </span>\n                            <span className=\"text-gray-900 text-sm\">\n                              {formatDate(getAccountField('@_LastActivityDate'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-gray-100 py-2\">\n                            <span className=\"font-medium text-gray-700 text-sm\">\n                              Date Reported:\n                            </span>\n                            <span className=\"text-gray-900 text-sm\">\n                              {formatDate(getAccountField('@_AccountBalanceDate'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-gray-100 py-2\">\n                            <span className=\"font-medium text-gray-700 text-sm\">Late 30 Days:</span>\n                            <span className=\"text-gray-900 text-sm\">\n                              {getAccountField('@_Late30DaysCount', '0')}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-gray-100 py-2\">\n                            <span className=\"font-medium text-gray-700 text-sm\">Late 60 Days:</span>\n                            <span className=\"text-gray-900 text-sm\">\n                              {getAccountField('@_Late60DaysCount', '0')}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-gray-100 py-2\">\n                            <span className=\"font-medium text-gray-700 text-sm\">\n                              Late 90+ Days:\n                            </span>\n                            <span className=\"text-gray-900 text-sm\">\n                              {getAccountField('@_Late90DaysCount', '0')}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-cyan-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Account Status Date:</span>\n                            <span className=\"text-gray-900\">\n                              {formatDate(getAccountField('@_AccountStatusDate'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-cyan-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Last Payment Date:</span>\n                            <span className=\"text-gray-900\">\n                              {formatDate(getAccountField('@_LastPaymentDate'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-cyan-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Date Closed:</span>\n                            <span className=\"text-gray-900\">\n                              {formatDate(getAccountField('@_AccountClosedDate'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-cyan-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Terms:</span>\n                            <span className=\"text-gray-900\">\n                              {getAccountField('@_TermsDescription')}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"font-medium text-gray-600\">Ownership:</span>\n                            <span className=\"text-gray-900\">\n                              {getAccountField('@_AccountOwnershipType')}\n                            </span>\n                          </div>\n\n                          {/* Payment History */}\n                          <div className=\"mt-3 pt-3 border-t border-cyan-200\">\n                            <div className=\"mb-2\">\n                              <span className=\"text-xs font-medium text-gray-600\">\n                                Payment History:\n                              </span>\n                            </div>\n                            <PaymentHistoryVisual\n                              paymentPattern={\n                                account['_PAYMENT_PATTERN']?.['@_Data'] || 'CCCCCCCCCCCCCCCCCCCCCCC'\n                              }\n                              compact={true}\n                            />\n                          </div>\n                        </>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Equifax Details */}\n                  <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n                    <h4 className=\"font-bold text-red-600 mb-1\">Equifax</h4>\n                    <h3 className=\"font-bold text-gray-900 text-lg mb-3\">\n                      {getAccountField('@_SubscriberName') || getCreditorName()}\n                    </h3>\n                    <div className=\"grid grid-cols-1 gap-2 text-xs\">\n                      {isPublicRecord() ? (\n                        // Public Record Fields\n                        <>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Record Type:</span>\n                            <span className=\"text-gray-900\">\n                              {account.publicRecordType || 'Public Record'}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Court:</span>\n                            <span className=\"text-gray-900\">\n                              {account.courtName || account['@_SubscriberName']}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Case Number:</span>\n                            <span className=\"text-gray-900\">\n                              {account.caseNumber || account['@_AccountIdentifier']}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Filing Date:</span>\n                            <span className=\"text-gray-900\">\n                              {formatDate(account.filingDate || account['@_AccountOpenedDate'])}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Status:</span>\n                            <span className=\"text-red-600 font-medium\">\n                              {account.status || account['@_AccountStatusType']}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Liabilities:</span>\n                            <span className=\"text-gray-900\">\n                              {account.liabilities ||\n                                formatCurrency(account['@_UnpaidBalanceAmount'])}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Assets:</span>\n                            <span className=\"text-gray-900\">{account.assets || 'N/A'}</span>\n                          </div>\n                          {account.dischargeDate && (\n                            <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                              <span className=\"font-medium text-gray-600\">Discharge Date:</span>\n                              <span className=\"text-gray-900\">\n                                {formatDate(account.dischargeDate)}\n                              </span>\n                            </div>\n                          )}\n                          {account.completionDate && (\n                            <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                              <span className=\"font-medium text-gray-600\">Completion Date:</span>\n                              <span className=\"text-gray-900\">\n                                {formatDate(account.completionDate)}\n                              </span>\n                            </div>\n                          )}\n                          {account.paymentPlan && (\n                            <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                              <span className=\"font-medium text-gray-600\">Payment Plan:</span>\n                              <span className=\"text-gray-900\">{account.paymentPlan}</span>\n                            </div>\n                          )}\n                        </>\n                      ) : (\n                        // Regular Account Fields\n                        <>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Account Type:</span>\n                            <span className=\"text-gray-900\">\n                              {account['@_AccountType'] || 'Credit Card'}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Account #:</span>\n                            <span className=\"text-gray-900\">{getMaskedAccountNumber()}</span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Date Opened:</span>\n                            <span className=\"text-gray-900\">\n                              {formatDate(getAccountField('@_AccountOpenedDate'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Payment Status:</span>\n                            <span\n                              className={`text-gray-900 ${getPaymentStatusStyle(bureauData.equifax.status)}`}\n                            >\n                              {bureauData.equifax.status}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Credit Limit:</span>\n                            <span className=\"text-gray-900\">\n                              {formatCurrency(getAccountField('@_CreditLimitAmount'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Balance:</span>\n                            <span className=\"text-gray-900\">${bureauData.equifax.balance}</span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Monthly Payment:</span>\n                            <span className=\"text-gray-900\">\n                              {formatCurrency(getAccountField('@_MonthlyPaymentAmount'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">High Balance:</span>\n                            <span className=\"text-gray-900\">\n                              {formatCurrency(getAccountField('@_HighBalanceAmount'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Past Due:</span>\n                            <span className=\"text-gray-900\">\n                              {formatCurrency(getAccountField('@_PastDueAmount', '0'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Last Activity:</span>\n                            <span className=\"text-gray-900\">\n                              {formatDate(getAccountField('@_LastActivityDate'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Date Reported:</span>\n                            <span className=\"text-gray-900\">\n                              {formatDate(getAccountField('@_AccountBalanceDate'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Late 30 Days:</span>\n                            <span className=\"text-gray-900\">\n                              {getAccountField('@_Late30DaysCount', '0')}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Late 60 Days:</span>\n                            <span className=\"text-gray-900\">\n                              {getAccountField('@_Late60DaysCount', '0')}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Late 90+ Days:</span>\n                            <span className=\"text-gray-900\">\n                              {getAccountField('@_Late90DaysCount', '0')}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Account Status Date:</span>\n                            <span className=\"text-gray-900\">\n                              {formatDate(getAccountField('@_AccountStatusDate'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Last Payment Date:</span>\n                            <span className=\"text-gray-900\">\n                              {formatDate(getAccountField('@_LastPaymentDate'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Date Closed:</span>\n                            <span className=\"text-gray-900\">\n                              {formatDate(getAccountField('@_AccountClosedDate'))}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between border-b border-red-100 pb-1\">\n                            <span className=\"font-medium text-gray-600\">Terms:</span>\n                            <span className=\"text-gray-900\">\n                              {getAccountField('@_TermsDescription')}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"font-medium text-gray-600\">Ownership:</span>\n                            <span className=\"text-gray-900\">\n                              {getAccountField('@_AccountOwnershipType')}\n                            </span>\n                          </div>\n\n                          {/* Payment History */}\n                          <div className=\"mt-3 pt-3 border-t border-red-200\">\n                            <div className=\"mb-2\">\n                              <span className=\"text-xs font-medium text-gray-600\">\n                                Payment History:\n                              </span>\n                            </div>\n                            <PaymentHistoryVisual\n                              paymentPattern={\n                                account['_PAYMENT_PATTERN']?.['@_Data'] || 'CCCCCCCCCCCCCCCCCCCCCCC'\n                              }\n                              compact={true}\n                            />\n                          </div>\n                        </>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Experian Details */}\n                  <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n                    <h4 className=\"font-bold text-blue-800 mb-1\">Experian</h4>\n                    <h3 className=\"font-bold text-gray-900 text-lg mb-3\">\n                      {getAccountField('@_SubscriberName') || getCreditorName()}\n                    </h3>\n                    <div className=\"grid grid-cols-1 gap-2 text-xs\">\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Account Type:</span>\n                        <span className=\"text-gray-900\">\n                          {account['@_AccountType'] || 'Credit Card'}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Account #:</span>\n                        <span className=\"text-gray-900\">{getMaskedAccountNumber()}</span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Date Opened:</span>\n                        <span className=\"text-gray-900\">\n                          {formatDate(getAccountField('@_AccountOpenedDate'))}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Payment Status:</span>\n                        <span\n                          className={`text-gray-900 ${getPaymentStatusStyle(bureauData.experian.status)}`}\n                        >\n                          {bureauData.experian.status}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Credit Limit:</span>\n                        <span className=\"text-gray-900\">\n                          {formatCurrency(getAccountField('@_CreditLimitAmount'))}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Balance:</span>\n                        <span className=\"text-gray-900\">${bureauData.experian.balance}</span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Monthly Payment:</span>\n                        <span className=\"text-gray-900\">\n                          {formatCurrency(getAccountField('@_MonthlyPaymentAmount'))}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">High Balance:</span>\n                        <span className=\"text-gray-900\">\n                          {formatCurrency(getAccountField('@_HighBalanceAmount'))}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Past Due:</span>\n                        <span className=\"text-gray-900\">\n                          {formatCurrency(getAccountField('@_PastDueAmount', '0'))}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Last Activity:</span>\n                        <span className=\"text-gray-900\">\n                          {formatDate(getAccountField('@_LastActivityDate'))}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Date Reported:</span>\n                        <span className=\"text-gray-900\">\n                          {formatDate(getAccountField('@_AccountBalanceDate'))}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Late 30 Days:</span>\n                        <span className=\"text-gray-900\">\n                          {getAccountField('@_Late30DaysCount', '0')}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Late 60 Days:</span>\n                        <span className=\"text-gray-900\">\n                          {getAccountField('@_Late60DaysCount', '0')}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Late 90+ Days:</span>\n                        <span className=\"text-gray-900\">\n                          {getAccountField('@_Late90DaysCount', '0')}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Account Status Date:</span>\n                        <span className=\"text-gray-900\">\n                          {formatDate(getAccountField('@_AccountStatusDate'))}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Last Payment Date:</span>\n                        <span className=\"text-gray-900\">\n                          {formatDate(getAccountField('@_LastPaymentDate'))}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Date Closed:</span>\n                        <span className=\"text-gray-900\">\n                          {formatDate(getAccountField('@_AccountClosedDate'))}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between border-b border-green-100 pb-1\">\n                        <span className=\"font-medium text-gray-600\">Terms:</span>\n                        <span className=\"text-gray-900\">\n                          {getAccountField('@_TermsDescription')}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium text-gray-600\">Ownership:</span>\n                        <span className=\"text-gray-900\">\n                          {getAccountField('@_AccountOwnershipType')}\n                        </span>\n                      </div>\n\n                      {/* Payment History */}\n                      <div className=\"mt-3 pt-3 border-t border-green-200\">\n                        <div className=\"mb-2\">\n                          <span className=\"text-xs font-medium text-gray-600\">\n                            Payment History:\n                          </span>\n                        </div>\n                        <PaymentHistoryVisual\n                          paymentPattern={\n                            account['_PAYMENT_PATTERN']?.['@_Data'] || 'CCCCCCCCCCCCCCCCCCCCCCC'\n                          }\n                          compact={true}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Bureau Comparison Grid - Full Width */}\n        <div className={`grid grid-cols-1 md:grid-cols-3 mb-4 ${isFirstCopy ? 'gap-6' : 'gap-4'}`}>\n          {/* TransUnion */}\n          <div className=\"relative\">\n            <div\n              className={`border rounded-lg p-4 ${\n                isDisputeSaved\n                  ? 'border-green-500 bg-green-50'\n                  : (transUnionStatus || (accountIsNegative ? 'Negative' : 'Positive')) ===\n                      'Negative'\n                    ? 'border-3 border-red-500 bg-white'\n                    : 'border-gray-200 bg-gray-50'\n              }`}\n            >\n              <div className=\"flex-between mb-3\">\n                <h4 className=\"font-semibold text-black\">{getCreditorName()}</h4>\n                <Select\n                  value={transUnionStatus || (accountIsNegative ? 'Negative' : 'Positive')}\n                  onValueChange={setTransUnionStatus}\n                >\n                  <SelectTrigger\n                    className={`w-24 h-7 text-xs transform translate-x-[10px] [&>svg]:w-3 [&>svg]:h-3 [&>svg]:opacity-100 [&>svg]:shrink-0 border-0 bg-transparent shadow-none hover:bg-gray-50 ${\n                      (transUnionStatus || (accountIsNegative ? 'Negative' : 'Positive')) ===\n                      'Negative'\n                        ? 'text-red-600 [&>svg]:text-red-600'\n                        : 'text-green-700 [&>svg]:text-green-600'\n                    }`}\n                  >\n                    <div className=\"flex items-center gap-1\">\n                      {(transUnionStatus || (accountIsNegative ? 'Negative' : 'Positive')) ===\n                        'Negative' && <AlertTriangle className=\"w-3 h-3\" />}\n                      {(transUnionStatus || (accountIsNegative ? 'Negative' : 'Positive')) ===\n                        'Positive' && <span className=\"text-green-600 text-xs ml-1\">✓</span>}\n                      <SelectValue />\n                    </div>\n                  </SelectTrigger>\n                  <SelectContent>\n                    {statusOptions.map((status) => (\n                      <SelectItem key={status} value={status}>\n                        {status}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2 text-xs\">\n                {/* Basic 5 lines - always visible */}\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Account Type:</span>\n                  <span className=\"font-medium\">{account['@_AccountType'] || 'Credit Card'}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Account #:</span>\n                  <span className=\"font-medium\">{getMaskedAccountNumber()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Balance:</span>\n                  <span className=\"font-medium\">${bureauData.transUnion.balance}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Status:</span>\n                  <span\n                    className={`font-medium ${getPaymentStatusStyle(bureauData.transUnion.status)}`}\n                  >\n                    {bureauData.transUnion.status}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Updated:</span>\n                  <span className=\"font-medium\">{bureauData.transUnion.lastUpdated}</span>\n                </div>\n\n                {/* Comprehensive details - only visible when toggle is active or expandAll is true */}\n                {(showAccountDetails || expandAll) && (\n                  <>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Date Opened:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_AccountOpenedDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Credit Limit:</span>\n                      <span className=\"font-medium\">\n                        {formatCurrency(getAccountField('@_CreditLimitAmount'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Monthly Payment:</span>\n                      <span className=\"font-medium\">\n                        {formatCurrency(getAccountField('@_MonthlyPaymentAmount'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">High Balance:</span>\n                      <span className=\"font-medium\">\n                        {formatCurrency(getAccountField('@_HighBalanceAmount'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Past Due:</span>\n                      <span className=\"font-medium\">\n                        {formatCurrency(getAccountField('@_PastDueAmount', '0'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Last Activity:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_LastActivityDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Date Reported:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_AccountBalanceDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Actual Payment Amount:</span>\n                      <span className=\"font-medium\">\n                        {formatCurrency(getAccountField('@_ActualPaymentAmount'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Account Ownership:</span>\n                      <span className=\"font-medium\">\n                        {getAccountField('@_AccountOwnershipType')}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Creditor Classification:</span>\n                      <span className=\"font-medium\">{getAccountField('@_CreditBusinessType')}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Terms Duration:</span>\n                      <span className=\"font-medium\">\n                        {getAccountField('@_TermsMonthsCount')} months\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Terms Frequency:</span>\n                      <span className=\"font-medium\">{getAccountField('@_TermsFrequencyType')}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Account Status Date:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_AccountStatusDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Last Payment Date:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_LastPaymentDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Account Closed Date:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_AccountClosedDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Date Verified:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_CreditLiabilityAccountReportedDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Terms:</span>\n                      <span className=\"font-medium\">{getAccountField('@_TermsDescription')}</span>\n                    </div>\n\n                    {/* Payment History for TransUnion */}\n                    <div className=\"mt-3 pt-3 border-t border-gray-200\">\n                      <div className=\"mb-2\">\n                        <span className=\"text-gray-600 text-xs font-medium\">Payment History:</span>\n                      </div>\n                      <PaymentHistoryVisual\n                        paymentPattern={\n                          account['_PAYMENT_PATTERN']?.['@_Data'] || 'CCCCCCCCCCCCCCCCCCCCCCC'\n                        }\n                        compact={true}\n                      />\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Equifax */}\n          <div>\n            {/* Mobile Bureau Header - Above Box */}\n            <div className=\"block md:hidden mb-2\">\n              <h3 className=\"font-bold text-red-600 text-left\">Equifax</h3>\n            </div>\n            <div\n              className={`border rounded-lg p-4 ${\n                isDisputeSaved\n                  ? 'border-green-500 bg-green-50'\n                  : (equifaxStatus || (accountIsNegative ? 'Negative' : 'Positive')) === 'Negative'\n                    ? 'border-3 border-red-500 bg-white'\n                    : 'border-gray-200 bg-gray-50'\n              }`}\n            >\n              <div className=\"flex-between mb-3\">\n                <h4 className=\"font-semibold text-black\">{getCreditorName()}</h4>\n                <Select\n                  value={equifaxStatus || (accountIsNegative ? 'Negative' : 'Positive')}\n                  onValueChange={setEquifaxStatus}\n                >\n                  <SelectTrigger\n                    className={`w-24 h-7 text-xs transform translate-x-[10px] [&>svg]:w-3 [&>svg]:h-3 [&>svg]:opacity-100 [&>svg]:shrink-0 border-0 bg-transparent shadow-none hover:bg-gray-50 ${\n                      (equifaxStatus || (accountIsNegative ? 'Negative' : 'Positive')) ===\n                      'Negative'\n                        ? 'text-red-600 [&>svg]:text-red-600'\n                        : 'text-green-700 [&>svg]:text-green-600'\n                    }`}\n                  >\n                    <div className=\"flex items-center gap-1\">\n                      {(equifaxStatus || (accountIsNegative ? 'Negative' : 'Positive')) ===\n                        'Negative' && <AlertTriangle className=\"w-3 h-3\" />}\n                      {(equifaxStatus || (accountIsNegative ? 'Negative' : 'Positive')) ===\n                        'Positive' && <span className=\"text-green-600 text-xs ml-1\">✓</span>}\n                      <SelectValue />\n                    </div>\n                  </SelectTrigger>\n                  <SelectContent>\n                    {statusOptions.map((status) => (\n                      <SelectItem key={status} value={status}>\n                        {status}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2 text-xs\">\n                {/* Basic 5 lines - always visible */}\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Account Type:</span>\n                  <span className=\"font-medium\">{account['@_AccountType'] || 'Credit Card'}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Account #:</span>\n                  <span className=\"font-medium\">{getMaskedAccountNumber()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Balance:</span>\n                  <span className=\"font-medium\">${bureauData.equifax.balance}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Status:</span>\n                  <span\n                    className={`font-medium ${getPaymentStatusStyle(bureauData.equifax.status)}`}\n                  >\n                    {bureauData.equifax.status}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Updated:</span>\n                  <span className=\"font-medium\">{bureauData.equifax.lastUpdated}</span>\n                </div>\n\n                {/* Comprehensive details - only visible when toggle is active or expandAll is true */}\n                {(showAccountDetails || expandAll) && (\n                  <>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Date Opened:</span>\n                      <span className=\"font-medium\">{account['@_AccountOpenedDate'] || 'N/A'}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Credit Limit:</span>\n                      <span className=\"font-medium\">\n                        ${account['@_CreditLimitAmount'] || 'N/A'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Monthly Payment:</span>\n                      <span className=\"font-medium\">\n                        ${account['@_MonthlyPaymentAmount'] || 'N/A'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">High Balance:</span>\n                      <span className=\"font-medium\">\n                        ${account['@_HighBalanceAmount'] || 'N/A'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Past Due:</span>\n                      <span className=\"font-medium\">${account['@_PastDueAmount'] || '0'}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Last Activity:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_LastActivityDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Date Reported:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_AccountBalanceDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Actual Payment Amount:</span>\n                      <span className=\"font-medium\">\n                        {formatCurrency(getAccountField('@_ActualPaymentAmount'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Account Ownership:</span>\n                      <span className=\"font-medium\">\n                        {getAccountField('@_AccountOwnershipType')}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Creditor Classification:</span>\n                      <span className=\"font-medium\">{getAccountField('@_CreditBusinessType')}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Terms Duration:</span>\n                      <span className=\"font-medium\">\n                        {getAccountField('@_TermsMonthsCount')} months\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Terms Frequency:</span>\n                      <span className=\"font-medium\">{getAccountField('@_TermsFrequencyType')}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Account Status Date:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_AccountStatusDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Last Payment Date:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_LastPaymentDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Account Closed Date:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_AccountClosedDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Date Verified:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_CreditLiabilityAccountReportedDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Terms:</span>\n                      <span className=\"font-medium\">{getAccountField('@_TermsDescription')}</span>\n                    </div>\n\n                    {/* Payment History for Equifax */}\n                    <div className=\"mt-3 pt-3 border-t border-gray-200\">\n                      <div className=\"mb-2\">\n                        <span className=\"text-gray-600 text-xs font-medium\">Payment History:</span>\n                      </div>\n                      <PaymentHistoryVisual\n                        paymentPattern={\n                          account['_PAYMENT_PATTERN']?.['@_Data'] || 'CCCCCCCCCCCCCCCCCCCCCCC'\n                        }\n                        compact={true}\n                      />\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Experian */}\n          <div>\n            {/* Mobile Bureau Header - Above Box */}\n            <div className=\"block md:hidden mb-2\">\n              <h3 className=\"font-bold text-blue-800 text-left\">Experian</h3>\n            </div>\n            <div\n              className={`border rounded-lg p-4 ${\n                isDisputeSaved\n                  ? 'border-green-500 bg-green-50'\n                  : (experianStatus || (accountIsNegative ? 'Negative' : 'Positive')) === 'Negative'\n                    ? 'border-3 border-red-500 bg-white'\n                    : 'border-gray-200 bg-gray-50'\n              }`}\n            >\n              <div className=\"flex-between mb-3\">\n                <h4 className=\"font-semibold text-black\">{getCreditorName()}</h4>\n                <Select\n                  value={experianStatus || (accountIsNegative ? 'Negative' : 'Positive')}\n                  onValueChange={setExperianStatus}\n                >\n                  <SelectTrigger\n                    className={`w-24 h-7 text-xs transform translate-x-[10px] [&>svg]:w-3 [&>svg]:h-3 [&>svg]:opacity-100 [&>svg]:shrink-0 border-0 bg-transparent shadow-none hover:bg-gray-50 ${\n                      (experianStatus || (accountIsNegative ? 'Negative' : 'Positive')) ===\n                      'Negative'\n                        ? 'text-red-600 [&>svg]:text-red-600'\n                        : 'text-green-700 [&>svg]:text-green-600'\n                    }`}\n                  >\n                    <div className=\"flex items-center gap-1\">\n                      {(experianStatus || (accountIsNegative ? 'Negative' : 'Positive')) ===\n                        'Negative' && <AlertTriangle className=\"w-3 h-3\" />}\n                      {(experianStatus || (accountIsNegative ? 'Negative' : 'Positive')) ===\n                        'Positive' && <span className=\"text-green-600 text-xs ml-1\">✓</span>}\n                      <SelectValue />\n                    </div>\n                  </SelectTrigger>\n                  <SelectContent>\n                    {statusOptions.map((status) => (\n                      <SelectItem key={status} value={status}>\n                        {status}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2 text-xs\">\n                {/* Basic 5 lines - always visible */}\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Account Type:</span>\n                  <span className=\"font-medium\">{account['@_AccountType'] || 'Credit Card'}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Account #:</span>\n                  <span className=\"font-medium\">{getMaskedAccountNumber()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Balance:</span>\n                  <span className=\"font-medium\">${bureauData.experian.balance}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Status:</span>\n                  <span\n                    className={`font-medium ${getPaymentStatusStyle(bureauData.experian.status)}`}\n                  >\n                    {bureauData.experian.status}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Updated:</span>\n                  <span className=\"font-medium\">{bureauData.experian.lastUpdated}</span>\n                </div>\n\n                {/* Comprehensive details - only visible when toggle is active or expandAll is true */}\n                {(showAccountDetails || expandAll) && (\n                  <>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Date Opened:</span>\n                      <span className=\"font-medium\">{account['@_AccountOpenedDate'] || 'N/A'}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Credit Limit:</span>\n                      <span className=\"font-medium\">\n                        ${account['@_CreditLimitAmount'] || 'N/A'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Monthly Payment:</span>\n                      <span className=\"font-medium\">\n                        ${account['@_MonthlyPaymentAmount'] || 'N/A'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">High Balance:</span>\n                      <span className=\"font-medium\">\n                        ${account['@_HighBalanceAmount'] || 'N/A'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Past Due:</span>\n                      <span className=\"font-medium\">${account['@_PastDueAmount'] || '0'}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Last Activity:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_LastActivityDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Date Reported:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_AccountBalanceDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Actual Payment Amount:</span>\n                      <span className=\"font-medium\">\n                        {formatCurrency(getAccountField('@_ActualPaymentAmount'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Account Ownership:</span>\n                      <span className=\"font-medium\">\n                        {getAccountField('@_AccountOwnershipType')}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Creditor Classification:</span>\n                      <span className=\"font-medium\">{getAccountField('@_CreditBusinessType')}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Terms Duration:</span>\n                      <span className=\"font-medium\">\n                        {getAccountField('@_TermsMonthsCount')} months\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Terms Frequency:</span>\n                      <span className=\"font-medium\">{getAccountField('@_TermsFrequencyType')}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Account Status Date:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_AccountStatusDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Last Payment Date:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_LastPaymentDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Account Closed Date:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_AccountClosedDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Date Verified:</span>\n                      <span className=\"font-medium\">\n                        {formatDate(getAccountField('@_CreditLiabilityAccountReportedDate'))}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Terms:</span>\n                      <span className=\"font-medium\">{getAccountField('@_TermsDescription')}</span>\n                    </div>\n\n                    {/* Payment History for Experian */}\n                    <div className=\"mt-3 pt-3 border-t border-gray-200\">\n                      <div className=\"mb-2\">\n                        <span className=\"text-gray-600 text-xs font-medium\">Payment History:</span>\n                      </div>\n                      <PaymentHistoryVisual\n                        paymentPattern={\n                          account['_PAYMENT_PATTERN']?.['@_Data'] || 'CCCCCCCCCCCCCCCCCCCCCCC'\n                        }\n                        compact={true}\n                      />\n                    </div>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Show All Info Toggle Button - Desktop Only - Hide when expandAll is active */}\n        {!expandAll && (\n          <div className=\"hidden md:flex justify-center -mt-2 mb-0 relative w-full\">\n            <button\n              onClick={() => setShowAccountDetails(!showAccountDetails)}\n              className=\"flex items-center gap-2 text-blue-600 hover:text-blue-800 transition-colors text-sm font-medium\"\n            >\n              {/* For all accounts, show text with arrow */}\n              <span>{showAccountDetails ? 'Show Less' : 'Show More'}</span>\n              <svg\n                className={`w-4 h-4 transition-transform ${showAccountDetails ? 'rotate-180' : ''}`}\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M19 9l-7 7-7-7\"\n                />\n              </svg>\n            </button>\n          </div>\n        )}\n\n        {/* Light grey divider below More Details toggle for negative accounts */}\n        {hasAnyNegative && <div className=\"border-t border-gray-200 mt-2 mb-3\"></div>}\n\n        {/* AI Violations Alert (if any) */}\n        {aiViolations.length > 0 && (\n          <div style={{ marginTop: '-6px' }}>\n            <button\n              onClick={() => {\n                setShowViolations(!showViolations);\n                if (!showViolations) {\n                  setShowGuidedHelp(false); // Close dispute suggestions when opening violations\n                }\n              }}\n              className=\"flex items-center gap-2 text-sm text-blue-600 hover:text-blue-700 hover:bg-gradient-to-r hover:from-blue-50 hover:to-purple-50 p-2 rounded-md transition-colors font-medium\"\n            >\n              <Zap className=\"w-4 h-4 text-blue-600\" />\n              <span className=\"hidden md:inline\">\n                View {aiViolations.length} Compliance Violations\n                {(() => {\n                  const metro2Count = aiViolations.filter((v) => v.includes('Metro 2')).length;\n                  const fcrCount = aiViolations.length - metro2Count;\n                  if (metro2Count > 0 && fcrCount > 0) {\n                    return ` (${metro2Count} Metro 2, ${fcrCount} FCRA)`;\n                  } else if (metro2Count > 0) {\n                    return ` (${metro2Count} Metro 2)`;\n                  } else if (fcrCount > 0) {\n                    return ` (${fcrCount} FCRA)`;\n                  }\n                  return '';\n                })()}\n              </span>\n              <span className=\"md:hidden font-medium\">\n                View {aiViolations.length} Violations\n                {(() => {\n                  const metro2Count = aiViolations.filter((v) => v.includes('Metro 2')).length;\n                  const fcrCount = aiViolations.length - metro2Count;\n                  if (metro2Count > 0 && fcrCount > 0) {\n                    return ` (${metro2Count}M2, ${fcrCount}FCRA)`;\n                  } else if (metro2Count > 0) {\n                    return ` (${metro2Count}M2)`;\n                  } else if (fcrCount > 0) {\n                    return ` (${fcrCount}FCRA)`;\n                  }\n                  return '';\n                })()}\n              </span>\n              {showViolations ? (\n                <ChevronUp className=\"w-4 h-4\" />\n              ) : (\n                <ChevronDown className=\"w-4 h-4\" />\n              )}\n            </button>\n\n            {/* Expanded Violations List */}\n            {showViolations && (\n              <div\n                className=\"-mt-2 space-y-2 bg-blue-50 border border-blue-600 rounded-lg p-3\"\n                style={{ marginTop: '-6px' }}\n              >\n                <div className=\"mb-3 flex-between\">\n                  <button\n                    onClick={() => setShowViolations(!showViolations)}\n                    className=\"flex-1 text-left hover:bg-blue-100 rounded-md p-2 transition-colors mr-2\"\n                  >\n                    <h4 className=\"text-sm font-medium text-gray-900\">Detected Violations</h4>\n                  </button>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        addAllViolations(e);\n                      }}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"px-3 py-2 text-sm font-black bg-blue-600 text-white hover:bg-blue-700 hover:text-white border-blue-600 hover:border-blue-700\"\n                    >\n                      <Zap className=\"w-3 h-3 mr-1\" />\n                      Use All {aiViolations.length}\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"mt-4 space-y-2\">\n                  {aiViolations.map((violation, index) => (\n                    <div key={index} className=\"p-3 bg-white rounded border border-gray-200\">\n                      {/* Desktop Layout */}\n                      <div className=\"hidden md:flex-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <span\n                              className={`inline-flex items-center rounded-full px-1.5 py-0.5 text-xs font-medium ${\n                                violation.includes('Metro 2')\n                                  ? 'bg-blue-200 text-blue-800 border border-blue-300'\n                                  : 'bg-red-200 text-red-800 border border-red-300'\n                              }`}\n                              style={{ fontSize: '10px' }}\n                            >\n                              {violation.includes('Metro 2') ? 'Metro 2' : 'FCRA'}\n                            </span>\n                            <span className=\"text-sm font-medium\">{violation}</span>\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (selectedViolations.includes(violation)) {\n                              removeViolationFromDispute(violation);\n                            } else {\n                              addViolationToDispute(violation);\n                            }\n                          }}\n                          className={\n                            selectedViolations.includes(violation)\n                              ? 'bg-blue-50 border-blue-300'\n                              : 'border-gray-300'\n                          }\n                        >\n                          {selectedViolations.includes(violation) ? 'Added' : 'Add to Dispute'}\n                        </Button>\n                      </div>\n\n                      {/* Mobile Layout */}\n                      <div className=\"md:hidden\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <span\n                            className={`inline-flex items-center rounded-full px-1.5 py-0.5 text-xs font-medium whitespace-nowrap flex-shrink-0 ${\n                              violation.includes('Metro 2')\n                                ? 'bg-blue-200 text-blue-800 border border-blue-300'\n                                : 'bg-red-200 text-red-800 border border-red-300'\n                            }`}\n                            style={{ fontSize: '10px' }}\n                          >\n                            {violation.includes('Metro 2') ? 'M-2' : 'FCRA'}\n                          </span>\n                          <span className=\"text-sm font-medium\">{violation}</span>\n                        </div>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            if (selectedViolations.includes(violation)) {\n                              removeViolationFromDispute(violation);\n                            } else {\n                              addViolationToDispute(violation);\n                            }\n                          }}\n                          className={`w-full border-2 font-black ${selectedViolations.includes(violation) ? 'bg-blue-600 border-blue-600 text-white' : 'border-gray-400 hover:bg-blue-600 hover:text-white hover:border-blue-600'}`}\n                        >\n                          {selectedViolations.includes(violation) ? 'Added' : 'Add to Dispute'}\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Guided Help Section - Optional suggestions */}\n        {hasAnyNegative && aiViolations.length > 0 && aiScanCompleted && (\n          <div className=\"mb-4\" style={{ marginTop: '-2px' }}>\n            <button\n              onClick={() => {\n                setShowGuidedHelp(!showGuidedHelp);\n                if (!showGuidedHelp) {\n                  setShowViolations(false); // Close violations when opening dispute suggestions\n                }\n              }}\n              className=\"flex items-center gap-2 text-sm text-blue-600 hover:text-white hover:bg-blue-700 p-2 rounded-md transition-colors font-medium\"\n            >\n              <Lightbulb className=\"w-4 h-4 text-blue-600\" />\n              <span>View AI Dispute Suggestions</span>\n              {showGuidedHelp ? (\n                <ChevronUp className=\"w-4 h-4\" />\n              ) : (\n                <ChevronDown className=\"w-4 h-4\" />\n              )}\n            </button>\n\n            {/* Expanded Guided Help - Simplified 3 combinations */}\n            {showGuidedHelp && (\n              <div\n                className=\"space-y-2 bg-blue-50 border border-blue-600 rounded-lg p-3\"\n                style={{ marginTop: '-2px' }}\n              >\n                <div className=\"mb-3 flex-between\">\n                  <button\n                    onClick={() => setShowGuidedHelp(!showGuidedHelp)}\n                    className=\"flex-1 text-left hover:bg-blue-100 rounded-md p-2 transition-colors mr-2\"\n                  >\n                    <h4 className=\"text-sm font-medium text-gray-900\">AI Dispute Suggestions</h4>\n                  </button>\n                  <button\n                    onClick={() => setShowGuidedHelp(false)}\n                    className=\"p-1 text-blue-600 hover:text-blue-800 hover:bg-blue-100 rounded transition-colors\"\n                    aria-label=\"Close suggestions\"\n                  >\n                    <ChevronUp className=\"w-4 h-4\" />\n                  </button>\n                </div>\n\n                <div className=\"space-y-2\">\n                  {getBestPracticeCombinations().map((combination, index) => (\n                    <div key={index} className=\"p-3 bg-white rounded border border-gray-200\">\n                      {/* Desktop Layout */}\n                      <div className=\"hidden md:flex-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <span\n                              className=\"inline-flex items-center rounded-full px-1.5 py-0.5 text-xs font-medium bg-blue-100 text-blue-600 border border-blue-200\"\n                              style={{ fontSize: '10px' }}\n                            >\n                              AI Suggestion\n                            </span>\n                            <span className=\"text-sm font-medium\">{combination.title}</span>\n                          </div>\n                          <div className=\"text-xs text-gray-600 space-y-1\">\n                            <div>\n                              <strong>Reason:</strong> {combination.reason}\n                            </div>\n                            <div>\n                              <strong>Instruction:</strong> {combination.instruction}\n                            </div>\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            applyBestPracticeCombination(combination, index, e);\n                          }}\n                          className={\n                            selectedSuggestionIndex === index\n                              ? 'bg-blue-50 border-blue-300'\n                              : 'border-gray-300'\n                          }\n                        >\n                          {selectedSuggestionIndex === index ? 'Added' : 'Add to Dispute'}\n                        </Button>\n                      </div>\n\n                      {/* Mobile Layout */}\n                      <div className=\"md:hidden\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <span\n                            className=\"inline-flex items-center rounded-full px-1.5 py-0.5 text-xs font-medium whitespace-nowrap flex-shrink-0 bg-blue-200 text-blue-800 border border-blue-300\"\n                            style={{ fontSize: '10px' }}\n                          >\n                            AI Suggestion\n                          </span>\n                          <span className=\"text-sm font-medium\">{combination.title}</span>\n                        </div>\n                        <div className=\"text-xs text-gray-600 space-y-1 mb-3\">\n                          <div>\n                            <strong>Reason:</strong> {combination.reason}\n                          </div>\n                          <div>\n                            <strong>Instruction:</strong> {combination.instruction}\n                          </div>\n                        </div>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            applyBestPracticeCombination(combination, index, e);\n                          }}\n                          className={`w-full border-2 font-black ${selectedSuggestionIndex === index ? 'bg-blue-600 border-blue-600 text-white' : 'border-gray-400 hover:bg-blue-600 hover:text-white hover:border-blue-600'}`}\n                        >\n                          {selectedSuggestionIndex === index ? 'Added' : 'Add to Dispute'}\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"text-xs text-gray-500 italic mt-3 pt-2 border-t border-blue-200\">\n                  {selectedSuggestionIndex !== null ? (\n                    <div className=\"flex-between\">\n                      <span>Suggestion applied to dispute form below.</span>\n                      <button\n                        onClick={() => {\n                          setSelectedSuggestionIndex(null);\n                          setCustomReason('');\n                          setCustomInstruction('');\n                          setShowCustomReasonField(false);\n                          setShowCustomInstructionField(false);\n                        }}\n                        className=\"text-blue-600 hover:text-blue-800 underline text-xs\"\n                      >\n                        Choose different suggestion\n                      </button>\n                    </div>\n                  ) : (\n                    'Click any option above to auto-fill both reason and instruction fields, or choose your own options below.'\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Dispute Section (only for negative accounts) */}\n        {hasAnyNegative && (\n          <div className=\"pt-1 mt-1\" data-account-id={`${account['@_SubscriberCode']}-dispute`}>\n            <div\n              className=\"flex items-center gap-3 mb-4\"\n              data-step=\"2\"\n              id={`dispute-step-${accountUniqueId}`}\n            >\n              {isDisputeSaved ? (\n                <span className=\"text-green-600 text-lg font-bold\">✓</span>\n              ) : (\n                <span className=\"circle-badge-blue\">2</span>\n              )}\n              <span className=\"font-bold\">\n                {isDisputeSaved ? (() => {\n                  // Count negative bureaus for this account to determine singular/plural\n                  let disputeCount = 0;\n                  const tuIsNegative = isNegativeAccount(bureauData.transUnion.status) || account['@_DerogatoryDataIndicator'] === 'Y';\n                  const eqIsNegative = isNegativeAccount(bureauData.equifax.status) || account['@_DerogatoryDataIndicator'] === 'Y';\n                  const exIsNegative = isNegativeAccount(bureauData.experian.status) || account['@_DerogatoryDataIndicator'] === 'Y';\n                  \n                  if (tuIsNegative) disputeCount++;\n                  if (eqIsNegative) disputeCount++;\n                  if (exIsNegative) disputeCount++;\n                  \n                  return disputeCount === 1 ? 'Dispute Saved' : 'Disputes Saved';\n                })() : 'Dispute Module'}\n              </span>\n            </div>\n\n            <div className=\"space-y-4\">\n              {/* Reason Selection */}\n              <div>\n                <div>\n                  {!showCustomReasonField && (\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <label className=\"text-sm font-medium\">Dispute Reason</label>\n                      {isTypingReason && (\n                        <div className=\"flex items-center text-red-600 text-sm\">\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-red-700 mr-2\"></div>\n                          AI Writing...\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  <div className=\"relative\">\n                    {!isTypingReason && !showCustomReasonField ? (\n                      <select\n                        value={selectedReason || ''}\n                        onChange={(e) => {\n                          const value = e.target.value;\n                          // Reset dispute saved state when dropdown is changed\n                          if (isDisputeSaved) {\n                            setIsDisputeSaved(false);\n                          }\n                          if (value === '__custom__') {\n                            setShowCustomReasonField(true);\n                            setSelectedReason('');\n                            setCustomReason('');\n                          } else if (value !== '') {\n                            // Clear all custom state and use dropdown selection\n                            setCustomReason(value);\n                            setSelectedReason(value);\n                            setShowCustomReasonField(false);\n                            setIsTypingReason(false);\n                            setTimeout(() => checkFormCompletionAndShowArrow(value), 300);\n                          }\n                        }}\n                        className={`w-full border bg-white h-[40px] px-3 text-sm rounded-md focus:outline-none dispute-reason-field ${\n                          isDisputeSaved && selectedReason\n                            ? 'border-green-500 focus:border-green-500'\n                            : hasAnyNegative\n                              ? 'border-red-500 focus:border-red-500'\n                              : 'border-gray-300 focus:border-gray-400'\n                        }`}\n                      >\n                        <option value=\"\">Select dispute reason...</option>\n                        {disputeReasons.slice(1, -1).map((reason) => (\n                          <option key={reason} value={reason}>\n                            {reason}\n                          </option>\n                        ))}\n                        <option value=\"__custom__\">✏️ Write custom reason...</option>\n                      </select>\n                    ) : (\n                      <div>\n                        <div className=\"flex-between mb-2 min-h-[20px]\">\n                          <label className=\"text-sm font-medium\">Dispute Reason</label>\n                          <button\n                            onClick={() => {\n                              const accountId =\n                                account['@CreditLiabilityID'] ||\n                                account['@_AccountNumber'] ||\n                                account['@_AccountIdentifier'] ||\n                                account['@_SubscriberCode'] ||\n                                'unknown';\n                              setCustomReason('');\n                              setSelectedReason('');\n                              setSelectedViolations([]);\n                              setHasAiGeneratedText(false);\n                              setShowCustomReasonField(false);\n                              // Reset the entire card to unsaved state\n                              setIsDisputeSaved(false);\n                              setIsCollapsed(false);\n                              onHeaderReset?.();\n                              // Remove from parent's saved disputes\n                              onDisputeReset?.(accountId);\n                            }}\n                            className=\"text-xs text-blue-600 hover:text-blue-800 underline\"\n                          >\n                            Reset & choose different reason\n                          </button>\n                        </div>\n                        {isTypingReason ? (\n                          <div className=\"relative\">\n                            <div className=\"absolute -top-7 right-0 flex items-center gap-1 text-red-600 text-xs z-10\">\n                              <div className=\"w-1 h-1 bg-red-600 rounded-full animate-pulse\"></div>\n                              <span>AI typing</span>\n                            </div>\n                            <div\n                              className=\"w-full p-3 border border-red-500 rounded-md bg-red-50 text-gray-900\"\n                              style={{\n                                minHeight: '40px',\n                                wordBreak: 'break-word',\n                                overflowWrap: 'break-word',\n                                whiteSpace: 'pre-wrap',\n                                lineHeight: '1.5',\n                                maxWidth: '100%',\n                                boxSizing: 'border-box',\n                              }}\n                            >\n                              {customReason || 'AI is typing...'}\n                            </div>\n                          </div>\n                        ) : (\n                          <textarea\n                            value={customReason || ''}\n                            onChange={(e) => {\n                              if (!isTypingReason) {\n                                setCustomReason(e.target.value);\n                                // Reset dispute saved state when text is modified\n                                if (isDisputeSaved) {\n                                  setIsDisputeSaved(false);\n                                }\n                              }\n                            }}\n                            placeholder=\"Enter your dispute reason...\"\n                            className={`w-full border rounded-md p-3 text-sm focus:outline-none resize-none mobile-resizable dispute-reason-field ${\n                              isDisputeSaved && customReason\n                                ? 'border-green-500 focus:border-green-500'\n                                : hasAnyNegative\n                                  ? 'border-red-500 focus:border-red-500'\n                                  : 'border-gray-300 focus:border-gray-400'\n                            }`}\n                            rows={Math.max(1, Math.ceil((customReason || '').length / 80))}\n                            style={{\n                              minHeight: '40px',\n                              height: 'auto',\n                            }}\n                          />\n                        )}\n                        {false && customReason.trim() && !isTypingReason && (\n                          <div className=\"mt-2 flex justify-end\">\n                            <button\n                              onClick={() => {\n                                saveTemplateMutation.mutate({\n                                  type: 'reason',\n                                  text: customReason.trim(),\n                                  category: 'accounts',\n                                });\n                              }}\n                              disabled={saveTemplateMutation.isPending}\n                              className=\"px-3 py-1.5 bg-white border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors text-xs flex items-center gap-1\"\n                            >\n                              <Save className=\"w-3 h-3\" />\n                              {saveTemplateMutation.isPending ? 'Saving...' : 'Save for future use'}\n                            </button>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Instructions Selection */}\n              <div>\n                <div>\n                  {!showCustomInstructionField && (\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <label className=\"text-sm font-medium\">Dispute Instruction</label>\n                      {isTypingInstruction && (\n                        <div className=\"flex items-center text-red-600 text-sm\">\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-red-700 mr-2\"></div>\n                          AI Writing...\n                        </div>\n                      )}\n                    </div>\n                  )}\n                  <div className=\"relative\">\n                    {!isTypingInstruction && !showCustomInstructionField ? (\n                      <select\n                        value={selectedInstruction || ''}\n                        onChange={(e) => {\n                          const value = e.target.value;\n                          // Reset dispute saved state when dropdown is changed\n                          if (isDisputeSaved) {\n                            setIsDisputeSaved(false);\n                            onHeaderReset?.();\n                          }\n                          if (value === '__custom__') {\n                            setShowCustomInstructionField(true);\n                            setSelectedInstruction('');\n                            setCustomInstruction('');\n                          } else if (value !== '') {\n                            // Clear all custom state and use dropdown selection\n                            setCustomInstruction(value);\n                            setSelectedInstruction(value);\n                            setShowCustomInstructionField(false);\n                            setIsTypingInstruction(false);\n                            setTimeout(\n                              () => checkFormCompletionAndShowArrow(undefined, value),\n                              300\n                            );\n                          }\n                        }}\n                        className={`w-full border bg-white h-[40px] px-3 text-sm rounded-md focus:outline-none dispute-instruction-field ${\n                          isDisputeSaved && selectedInstruction\n                            ? 'border-green-500 focus:border-green-500'\n                            : hasAnyNegative\n                              ? 'border-red-500 focus:border-red-500'\n                              : 'border-gray-300 focus:border-gray-400'\n                        }`}\n                      >\n                        <option value=\"\">Select dispute instruction...</option>\n                        {disputeInstructions.slice(1, -1).map((instruction) => (\n                          <option key={instruction} value={instruction}>\n                            {instruction}\n                          </option>\n                        ))}\n                        <option value=\"__custom__\">✏️ Write custom instruction...</option>\n                      </select>\n                    ) : (\n                      <div>\n                        <div className=\"flex-between mb-2 min-h-[20px]\">\n                          <label className=\"text-sm font-medium\">Dispute Instruction</label>\n                          <button\n                            onClick={() => {\n                              const accountId =\n                                account['@CreditLiabilityID'] ||\n                                account['@_AccountNumber'] ||\n                                account['@_AccountIdentifier'] ||\n                                account['@_SubscriberCode'] ||\n                                'unknown';\n                              setCustomInstruction('');\n                              setSelectedInstruction('');\n                              setShowCustomInstructionField(false);\n                              // Reset the entire card to unsaved state\n                              setIsDisputeSaved(false);\n                              setIsCollapsed(false);\n                              onHeaderReset?.();\n                              // Remove from parent's saved disputes\n                              onDisputeReset?.(accountId);\n                            }}\n                            className=\"text-xs text-blue-600 hover:text-blue-800 underline\"\n                          >\n                            Reset & choose different instruction\n                          </button>\n                        </div>\n                        {isTypingInstruction ? (\n                          <div className=\"relative\">\n                            <div className=\"absolute -top-7 right-0 flex items-center gap-1 text-red-600 text-xs z-10\">\n                              <div className=\"w-1 h-1 bg-red-600 rounded-full animate-pulse\"></div>\n                              <span>AI typing</span>\n                            </div>\n                            <div\n                              className=\"w-full p-3 border border-red-500 rounded-md bg-red-50 text-gray-900\"\n                              style={{\n                                minHeight: '60px',\n                                wordBreak: 'break-word',\n                                overflowWrap: 'break-word',\n                                whiteSpace: 'pre-wrap',\n                                lineHeight: '1.5',\n                                maxWidth: '100%',\n                                boxSizing: 'border-box',\n                              }}\n                            >\n                              {customInstruction || 'AI is typing...'}\n                            </div>\n                          </div>\n                        ) : (\n                          <textarea\n                            value={customInstruction || ''}\n                            onChange={(e) => {\n                              if (!isTypingInstruction) {\n                                setCustomInstruction(e.target.value);\n                                // Reset dispute saved state when text is modified\n                                if (isDisputeSaved) {\n                                  setIsDisputeSaved(false);\n                                }\n                              }\n                            }}\n                            placeholder=\"Enter your dispute instruction...\"\n                            className={`w-full border rounded-md p-3 text-sm focus:outline-none resize-none mobile-resizable dispute-instruction-field ${\n                              isDisputeSaved && customInstruction\n                                ? 'border-green-500 focus:border-green-500'\n                                : hasAnyNegative\n                                  ? 'border-red-500 focus:border-red-500'\n                                  : 'border-gray-300 focus:border-gray-400'\n                            }`}\n                            rows={2}\n                            style={{\n                              minHeight: '60px',\n                            }}\n                          />\n                        )}\n                        {false && customInstruction.trim() && !isTypingInstruction && (\n                          <div className=\"mt-2 flex justify-end\">\n                            <button\n                              onClick={() => {\n                                saveTemplateMutation.mutate({\n                                  type: 'instruction',\n                                  text: customInstruction.trim(),\n                                  category: 'accounts',\n                                });\n                              }}\n                              disabled={saveTemplateMutation.isPending}\n                              className=\"px-3 py-1.5 bg-white border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors text-xs flex items-center gap-1\"\n                            >\n                              <Save className=\"w-3 h-3\" />\n                              {saveTemplateMutation.isPending ? 'Saving...' : 'Save for future use'}\n                            </button>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Submit Button */}\n              <div className=\"flex gap-2 justify-between items-center pt-2\">\n                {hasAnyNegative && !isDisputeSaved && !showGuideArrow ? (\n                  <div className=\"warning-container\">\n                    <AlertTriangle className=\"hidden md:block w-4 h-4 warning-icon\" />\n                    <span className=\"text-xs md:text-sm font-medium warning-text\">\n                      <span className=\"md:hidden\">Complete Step 2</span>\n                      <span className=\"hidden md:inline\">Complete Reason & Instruction</span>\n                    </span>\n                  </div>\n                ) : (\n                  <div></div>\n                )}\n                <div className=\"flex items-center gap-2 relative overflow-visible\">\n                  {/* Flying Arrow Guide */}\n                  {showGuideArrow && (\n                    <div\n                      className=\"absolute right-full top-1/2 transform -translate-y-1/2 z-50 pr-2 pointer-events-none\"\n                      style={{ width: 'calc(100vw - 160px)', left: 'calc(-100vw + 140px)' }}\n                    >\n                      <div className=\"flex items-center animate-fly-arrow\">\n                        <div className=\"w-16 h-1 bg-blue-600\"></div>\n                        <div className=\"w-0 h-0 border-l-[10px] border-t-[6px] border-b-[6px] border-l-blue-600 border-t-transparent border-b-transparent\"></div>\n                      </div>\n                    </div>\n                  )}\n                  {isDisputeSaved ? (\n                    <span className=\"text-green-600 text-lg font-bold mr-1\">✓</span>\n                  ) : (\n                    <span className=\"circle-badge-blue mr-1\">3</span>\n                  )}\n                  <Button\n                    disabled={(() => {\n                      const hasReason =\n                        selectedViolations.length > 0 || showCustomReasonField\n                          ? customReason.trim()\n                          : selectedReason;\n                      const hasInstruction =\n                        selectedViolations.length > 0 || showCustomInstructionField\n                          ? customInstruction.trim()\n                          : selectedInstruction;\n                      return !hasReason || !hasInstruction;\n                    })()}\n                    onClick={() => {\n                      // If already saved, still trigger choreography but maintain saved state\n                      if (isDisputeSaved) {\n                        // Notify parent component immediately for state tracking (re-save)\n                        if (onDisputeSaved) {\n                          const accountId =\n                            account['@CreditLiabilityID'] ||\n                            account['@_AccountNumber'] ||\n                            account['@_AccountIdentifier'] ||\n                            account['@_SubscriberCode'] ||\n                            'unknown';\n                          // Get current saved dispute data and pass it to maintain text\n                          const currentReason =\n                            selectedViolations.length > 0 || showCustomReasonField\n                              ? customReason.trim()\n                              : selectedReason.trim();\n                          const currentInstruction =\n                            selectedViolations.length > 0 || showCustomInstructionField\n                              ? customInstruction.trim()\n                              : selectedInstruction.trim();\n                          onDisputeSaved(accountId, {\n                            reason: currentReason,\n                            instruction: currentInstruction,\n                            violations: selectedViolations,\n                          });\n                        }\n\n                        // Show green feedback for 1 second, then collapse\n                        setTimeout(() => {\n                          setIsCollapsed(true);\n                        }, 1000);\n                        return;\n                      }\n\n                      // If typing is in progress, complete it immediately before saving\n                      if (isTypingReason || isTypingInstruction) {\n                        // Complete any ongoing typing animations immediately\n                        if (isTypingReason) {\n                          setIsTypingReason(false);\n                          // The auto-typing should have the complete reason in customReason\n                        }\n\n                        if (isTypingInstruction) {\n                          setIsTypingInstruction(false);\n                          // The auto-typing should have the complete instruction in customInstruction\n                        }\n\n                        // Wait a brief moment for state to update before proceeding\n                        setTimeout(() => {\n                          proceedWithAccountSave();\n                        }, 50);\n                        return;\n                      }\n\n                      proceedWithAccountSave();\n\n                      function proceedWithAccountSave() {\n                        // Force complete text values when auto-typing was used\n                        const finalReason =\n                          selectedViolations.length > 0 || showCustomReasonField\n                            ? customReason.trim()\n                            : selectedReason.trim();\n                        const finalInstruction =\n                          selectedViolations.length > 0 || showCustomInstructionField\n                            ? customInstruction.trim()\n                            : selectedInstruction.trim();\n\n                        if (!finalReason || !finalInstruction) {\n                          // Add red glow to incomplete fields\n                          if (!finalReason) {\n                            const reasonField = document.querySelector('.dispute-reason-field');\n                            if (reasonField) {\n                              reasonField.classList.add(\n                                'ring-4',\n                                'ring-red-400',\n                                'ring-opacity-75'\n                              );\n                              setTimeout(() => {\n                                reasonField.classList.remove(\n                                  'ring-4',\n                                  'ring-red-400',\n                                  'ring-opacity-75'\n                                );\n                              }, 2000);\n                            }\n                          }\n\n                          if (!finalInstruction) {\n                            const instructionField = document.querySelector(\n                              '.dispute-instruction-field'\n                            );\n                            if (instructionField) {\n                              instructionField.classList.add(\n                                'ring-4',\n                                'ring-red-400',\n                                'ring-opacity-75'\n                              );\n                              setTimeout(() => {\n                                instructionField.classList.remove(\n                                  'ring-4',\n                                  'ring-red-400',\n                                  'ring-opacity-75'\n                                );\n                              }, 2000);\n                            }\n                          }\n\n                          return;\n                        }\n\n                        // Set dispute as saved first to show green feedback\n                        setIsDisputeSaved(true);\n\n                        // Notify parent component immediately for state tracking\n                        if (onDisputeSaved) {\n                          const accountId =\n                            account['@CreditLiabilityID'] ||\n                            account['@_AccountNumber'] ||\n                            account['@_AccountIdentifier'] ||\n                            account['@_SubscriberCode'] ||\n                            'unknown';\n                          onDisputeSaved(accountId, {\n                            reason: finalReason,\n                            instruction: finalInstruction,\n                            violations: selectedViolations,\n                          });\n                        }\n\n                        // Start choreography: green → collapse within view → wait 1 second → scroll to next section\n                        setTimeout(() => {\n                          // First scroll the card to be visible for collapse animation\n                          const cardElement = document.querySelector(\n                            `[data-account-id=\"${account['@CreditLiabilityID'] || account['@_AccountNumber'] || account['@_AccountIdentifier'] || account['@_SubscriberCode'] || 'unknown'}\"]`\n                          );\n                          if (cardElement) {\n                            const rect = cardElement.getBoundingClientRect();\n                            const targetScrollY = window.pageYOffset + rect.top - 100; // Position card in view\n                            window.scrollTo({ top: targetScrollY, behavior: 'smooth' });\n\n                            // After scroll completes, collapse within view\n                            setTimeout(() => {\n                              setIsCollapsed(true);\n\n                              // Wait 1 second after collapse, then scroll to next account or handle last account\n                              setTimeout(() => {\n                                // Find next unsaved negative account\n                                const allAccountCards = Array.from(\n                                  document.querySelectorAll('[data-account-id]')\n                                );\n                                const currentAccountId =\n                                  account['@CreditLiabilityID'] ||\n                                  account['@_AccountNumber'] ||\n                                  account['@_AccountIdentifier'] ||\n                                  account['@_SubscriberCode'] ||\n                                  'unknown';\n                                let nextCard = null;\n                                let isCurrentAccount = false;\n\n                                // Find the next account after current one\n                                for (const card of allAccountCards) {\n                                  const cardId = card.getAttribute('data-account-id');\n\n                                  if (isCurrentAccount) {\n                                    // Check if it's a negative account that needs dispute\n                                    const isPinkCard =\n                                      card.classList.contains('bg-red-50') ||\n                                      card.querySelector('.bg-red-50');\n                                    const hasGreenSaved = card.querySelector(\n                                      '.bg-green-600, .text-green-600, .border-green-'\n                                    );\n\n                                    if (isPinkCard && !hasGreenSaved) {\n                                      nextCard = card;\n                                      break;\n                                    }\n                                  }\n\n                                  if (cardId === currentAccountId) {\n                                    isCurrentAccount = true;\n                                  }\n                                }\n\n                                if (nextCard) {\n                                  // Regular behavior: scroll to next account\n                                  const rect = nextCard.getBoundingClientRect();\n                                  const targetScrollY = window.pageYOffset + rect.top - 20;\n                                  window.scrollTo({ top: targetScrollY, behavior: 'smooth' });\n                                } else {\n                                  // Last account: scroll down to see what's about to happen, then trigger section collapse\n                                  const publicRecordsSection = document.querySelector(\n                                    '[data-section=\"public-records\"]'\n                                  );\n                                  if (publicRecordsSection) {\n                                    const rect = publicRecordsSection.getBoundingClientRect();\n                                    const targetScrollY = window.pageYOffset + rect.top - 100;\n                                    window.scrollTo({ top: targetScrollY, behavior: 'smooth' });\n\n                                    // After showing what's next, trigger section collapse\n                                    setTimeout(() => {\n                                      // Trigger parent component to handle section collapse\n                                      if (onDisputeSaved && allNegativeAccountsSaved) {\n                                        // Signal that this was the last account\n                                      }\n                                    }, 1000);\n                                  }\n                                }\n                              }, 1000); // Wait 1 second after collapse\n                            }, 300); // Wait for scroll to complete\n                          } else {\n                            // Fallback - collapse immediately then scroll\n                            setIsCollapsed(true);\n                            setTimeout(() => {\n                              const nextSection = document.querySelector(\n                                '[data-section=\"public-records\"]'\n                              );\n                              if (nextSection) {\n                                const rect = nextSection.getBoundingClientRect();\n                                const targetScrollY = window.pageYOffset + rect.top - 20;\n                                window.scrollTo({ top: targetScrollY, behavior: 'smooth' });\n                              }\n                            }, 1000);\n                          }\n                        }, 1000); // Wait 1 second for green feedback display\n                      }\n                    }}\n                    className={`!w-full !max-w-full !h-10 !px-4 !py-2 text-white rounded-md font-medium transition-colors duration-200 !opacity-100 !inline-flex !items-center !justify-center !box-border ${\n                      isDisputeSaved\n                        ? 'bg-green-600 hover:bg-green-700'\n                        : (() => {\n                            const hasReason =\n                              selectedViolations.length > 0 || showCustomReasonField\n                                ? customReason.trim()\n                                : selectedReason;\n                            const hasInstruction =\n                              selectedViolations.length > 0 || showCustomInstructionField\n                                ? customInstruction.trim()\n                                : selectedInstruction;\n                            const isIncomplete = !hasReason || !hasInstruction;\n                            return isIncomplete\n                              ? 'bg-gray-400 cursor-not-allowed'\n                              : 'bg-blue-600 hover:bg-blue-700';\n                          })()\n                    }`}\n                  >\n                    {isDisputeSaved ? (\n                      <>\n                        <span className=\"text-green-600 text-sm mr-2\">✓</span>\n                        <span className=\"hidden md:inline\">Dispute Saved</span>\n                        <span className=\"md:hidden\">Saved</span>\n                      </>\n                    ) : (\n                      'Save Dispute and Continue'\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]}]
